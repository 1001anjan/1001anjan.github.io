{"0": {
    "doc": "Anjan test",
    "title": "Configuration",
    "content": "Just the Docs has some specific configuration parameters that can be defined in your Jekyll site’s _config.yml file. ",
    "url": "http://localhost:4000/docs/anjanTest/#configuration",
    "relUrl": "/docs/anjanTest/#configuration"
  },"1": {
    "doc": "Anjan test",
    "title": "Table of contents",
    "content": ". | Site logo | Search | Aux links | Heading anchor links | Footer content | Color scheme | Google Analytics | Document collections | . View this site’s _config.yml file as an example. ",
    "url": "http://localhost:4000/docs/anjanTest/#table-of-contents",
    "relUrl": "/docs/anjanTest/#table-of-contents"
  },"2": {
    "doc": "Anjan test",
    "title": "Site logo",
    "content": "# Set a path/url to a logo that will be displayed instead of the title logo: \"/assets/images/just-the-docs.png\" . ",
    "url": "http://localhost:4000/docs/anjanTest/#site-logo",
    "relUrl": "/docs/anjanTest/#site-logo"
  },"3": {
    "doc": "Anjan test",
    "title": "Search",
    "content": "# Enable or disable the site search # Supports true (default) or false search_enabled: true search: # Split pages into sections that can be searched individually # Supports 1 - 6, default: 2 heading_level: 2 # Maximum amount of previews per search result # Default: 3 previews: 3 # Maximum amount of words to display before a matched word in the preview # Default: 5 preview_words_before: 5 # Maximum amount of words to display after a matched word in the preview # Default: 10 preview_words_after: 10 # Set the search token separator # Default: /[\\s\\-/]+/ # Example: enable support for hyphenated search words tokenizer_separator: /[\\s/]+/ # Display the relative url in search results # Supports true (default) or false rel_url: true # Enable or disable the search button that appears in the bottom right corner of every page # Supports true or false (default) button: false . ",
    "url": "http://localhost:4000/docs/anjanTest/#search",
    "relUrl": "/docs/anjanTest/#search"
  },"4": {
    "doc": "Anjan test",
    "title": "Aux links",
    "content": "# Aux links for the upper right navigation aux_links: \"Just the Docs on GitHub\": - \"//github.com/just-the-docs/just-the-docs\" # Makes Aux links open in a new tab. Default is false aux_links_new_tab: false . ",
    "url": "http://localhost:4000/docs/anjanTest/#aux-links",
    "relUrl": "/docs/anjanTest/#aux-links"
  },"5": {
    "doc": "Anjan test",
    "title": "Heading anchor links",
    "content": "# Heading anchor links appear on hover over h1-h6 tags in page content # allowing users to deep link to a particular heading on a page. # # Supports true (default) or false heading_anchors: true . ",
    "url": "http://localhost:4000/docs/anjanTest/#heading-anchor-links",
    "relUrl": "/docs/anjanTest/#heading-anchor-links"
  },"6": {
    "doc": "Anjan test",
    "title": "Footer content",
    "content": "# Footer content # appears at the bottom of every page's main content # Note: The footer_content option is deprecated and will be removed in a future major release. Please use `_includes/footer_custom.html` for more robust markup / liquid-based content. footer_content: \"Copyright &amp;copy; 2017-2020 Patrick Marsceill. Distributed by an &lt;a href=\\\"https://github.com/just-the-docs/just-the-docs/tree/main/LICENSE.txt\\\"&gt;MIT license.&lt;/a&gt;\" # Footer last edited timestamp last_edit_timestamp: true # show or hide edit time - page must have `last_modified_date` defined in the frontmatter last_edit_time_format: \"%b %e %Y at %I:%M %p\" # uses ruby's time format: https://ruby-doc.org/stdlib-2.7.0/libdoc/time/rdoc/Time.html # Footer \"Edit this page on GitHub\" link text gh_edit_link: true # show or hide edit this page link gh_edit_link_text: \"Edit this page on GitHub.\" gh_edit_repository: \"https://github.com/just-the-docs/just-the-docs\" # the github URL for your repo gh_edit_branch: \"main\" # the branch that your docs is served from # gh_edit_source: docs # the source that your files originate from gh_edit_view_mode: \"tree\" # \"tree\" or \"edit\" if you want the user to jump into the editor immediately . note: footer_content is deprecated, but still supported. For a better experience we have moved this into an include called _includes/footer_custom.html which will allow for robust markup / liquid-based content. | the “page last modified” data will only display if a page has a key called last_modified_date, formatted in some readable date format | last_edit_time_format uses Ruby’s DateTime formatter; see examples and more information at this link. | gh_edit_repository is the URL of the project’s GitHub repository | gh_edit_branch is the branch that the docs site is served from; defaults to main | gh_edit_source is the source directory that your project files are stored in (should be the same as site.source) | gh_edit_view_mode is \"tree\" by default, which brings the user to the github page; switch to \"edit\" to bring the user directly into editing mode | . ",
    "url": "http://localhost:4000/docs/anjanTest/#footer-content",
    "relUrl": "/docs/anjanTest/#footer-content"
  },"7": {
    "doc": "Anjan test",
    "title": "Color scheme",
    "content": "# Color scheme supports \"light\" (default) and \"dark\" color_scheme: dark . Preview dark color scheme . See Customization for more information. ",
    "url": "http://localhost:4000/docs/anjanTest/#color-scheme",
    "relUrl": "/docs/anjanTest/#color-scheme"
  },"8": {
    "doc": "Anjan test",
    "title": "Google Analytics",
    "content": "# Google Analytics Tracking (optional) # e.g, UA-1234567-89 ga_tracking: UA-5555555-55 ga_tracking_anonymize_ip: true # Use GDPR compliant Google Analytics settings (true by default) . ",
    "url": "http://localhost:4000/docs/anjanTest/#google-analytics",
    "relUrl": "/docs/anjanTest/#google-analytics"
  },"9": {
    "doc": "Anjan test",
    "title": "Document collections",
    "content": "By default, the navigation and search include normal pages. Instead, you can also use Jekyll collections which group documents semantically together. For example, put all your documentation files in the _docs folder and create the docs collection: . # Define Jekyll collections collections: # Define a collection named \"docs\", its documents reside in the \"_docs\" directory docs: permalink: \"/:collection/:path/\" output: true just_the_docs: # Define which collections are used in just-the-docs collections: # Reference the \"docs\" collection docs: # Give the collection a name name: Documentation # Exclude the collection from the navigation # Supports true or false (default) nav_exclude: false # Exclude the collection from the search # Supports true or false (default) search_exclude: false . You can reference multiple collections. This creates categories in the navigation with the configured names. collections: docs: permalink: \"/:collection/:path/\" output: true tutorials: permalink: \"/:collection/:path/\" output: true just_the_docs: collections: docs: name: Documentation tutorials: name: Tutorials . ",
    "url": "http://localhost:4000/docs/anjanTest/#document-collections",
    "relUrl": "/docs/anjanTest/#document-collections"
  },"10": {
    "doc": "Anjan test",
    "title": "Anjan test",
    "content": " ",
    "url": "http://localhost:4000/docs/anjanTest/",
    "relUrl": "/docs/anjanTest/"
  },"11": {
    "doc": "Buttons",
    "title": "Buttons",
    "content": " ",
    "url": "http://localhost:4000/docs/ui-components/buttons/",
    "relUrl": "/docs/ui-components/buttons/"
  },"12": {
    "doc": "Buttons",
    "title": "Table of contents",
    "content": ". | Basic button styles . | Links that look like buttons | Button element | . | Using utilities with buttons . | Button size | Spacing between buttons | . | . ",
    "url": "http://localhost:4000/docs/ui-components/buttons/#table-of-contents",
    "relUrl": "/docs/ui-components/buttons/#table-of-contents"
  },"13": {
    "doc": "Buttons",
    "title": "Basic button styles",
    "content": "Links that look like buttons . Link button . Link button Link button Link button . Link button . [Link button](http://example.com/){: .btn } [Link button](http://example.com/){: .btn .btn-purple } [Link button](http://example.com/){: .btn .btn-blue } [Link button](http://example.com/){: .btn .btn-green } [Link button](http://example.com/){: .btn .btn-outline } . Button element . GitHub Flavored Markdown does not support the button element, so you’ll have to use inline HTML for this: . Button element &lt;button type=\"button\" name=\"button\" class=\"btn\"&gt;Button element&lt;/button&gt; . ",
    "url": "http://localhost:4000/docs/ui-components/buttons/#basic-button-styles",
    "relUrl": "/docs/ui-components/buttons/#basic-button-styles"
  },"14": {
    "doc": "Buttons",
    "title": "Using utilities with buttons",
    "content": "Button size . Wrap the button in a container that uses the font-size utility classes to scale buttons: . Big ass button . Tiny ass button . &lt;span class=\"fs-8\"&gt; [Link button](http://example.com/){: .btn } &lt;/span&gt; &lt;span class=\"fs-3\"&gt; [Tiny ass button](http://example.com/){: .btn } &lt;/span&gt; . Spacing between buttons . Use the margin utility classes to add spacing between two buttons in the same block. Button with space Button . Button with more space Button . [Button with space](http://example.com/){: .btn .btn-purple .mr-2 } [Button ](http://example.com/){: .btn .btn-blue } [Button with more space](http://example.com/){: .btn .btn-green .mr-4 } [Button ](http://example.com/){: .btn .btn-blue } . ",
    "url": "http://localhost:4000/docs/ui-components/buttons/#using-utilities-with-buttons",
    "relUrl": "/docs/ui-components/buttons/#using-utilities-with-buttons"
  },"15": {
    "doc": "Code",
    "title": "Code",
    "content": " ",
    "url": "http://localhost:4000/docs/ui-components/code/",
    "relUrl": "/docs/ui-components/code/"
  },"16": {
    "doc": "Code",
    "title": "Table of contents",
    "content": ". | Inline code | Syntax highlighted code blocks | Code blocks with rendered examples | . ",
    "url": "http://localhost:4000/docs/ui-components/code/#table-of-contents",
    "relUrl": "/docs/ui-components/code/#table-of-contents"
  },"17": {
    "doc": "Code",
    "title": "Inline code",
    "content": "Code can be rendered inline by wrapping it in single back ticks. Lorem ipsum dolor sit amet, &lt;inline code snippet&gt; adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",
    "url": "http://localhost:4000/docs/ui-components/code/#inline-code",
    "relUrl": "/docs/ui-components/code/#inline-code"
  },"18": {
    "doc": "Code",
    "title": "Heading with &lt;inline code snippet&gt; in it.",
    "content": "Lorem ipsum dolor sit amet, `&lt;inline code snippet&gt;` adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ## Heading with `&lt;inline code snippet&gt;` in it. ",
    "url": "http://localhost:4000/docs/ui-components/code/#heading-with-inline-code-snippet-in-it",
    "relUrl": "/docs/ui-components/code/#heading-with-inline-code-snippet-in-it"
  },"19": {
    "doc": "Code",
    "title": "Syntax highlighted code blocks",
    "content": "Use Jekyll’s built-in syntax highlighting with Rouge for code blocks by using three backticks, followed by the language name: . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ```js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } ``` . ",
    "url": "http://localhost:4000/docs/ui-components/code/#syntax-highlighted-code-blocks",
    "relUrl": "/docs/ui-components/code/#syntax-highlighted-code-blocks"
  },"20": {
    "doc": "Code",
    "title": "Code blocks with rendered examples",
    "content": "To demonstrate front end code, sometimes it’s useful to show a rendered example of that code. After including the styles from your project that you’ll need to show the rendering, you can use a &lt;div&gt; with the code-example class, followed by the code block syntax. If you want to render your output with Markdown instead of HTML, use the markdown=\"1\" attribute to tell Jekyll that the code you are rendering will be in Markdown format… This is about to get meta… . Link button . [Link button](http://example.com/){: .btn } . &lt;div class=\"code-example\" markdown=\"1\"&gt; [Link button](http://example.com/){: .btn } &lt;/div&gt; ```markdown [Link button](http://example.com/){: .btn } ``` . ",
    "url": "http://localhost:4000/docs/ui-components/code/#code-blocks-with-rendered-examples",
    "relUrl": "/docs/ui-components/code/#code-blocks-with-rendered-examples"
  },"21": {
    "doc": "Color",
    "title": "Color Utilities",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/color/#color-utilities",
    "relUrl": "/docs/utilities/color/#color-utilities"
  },"22": {
    "doc": "Color",
    "title": "Table of contents",
    "content": ". | Light Greys | Dark Greys | Purples | Blues | Greens | Yellows | Reds | . All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. ",
    "url": "http://localhost:4000/docs/utilities/color/#table-of-contents",
    "relUrl": "/docs/utilities/color/#table-of-contents"
  },"23": {
    "doc": "Color",
    "title": "Light Greys",
    "content": "| Color value | Font color utility | Background color utility | . | grey-lt-000 | .text-grey-lt-000 | .bg-grey-lt-000 | . | grey-lt-100 | .text-grey-lt-100 | .bg-grey-lt-100 | . | grey-lt-200 | .text-grey-lt-200 | .bg-grey-lt-200 | . | grey-lt-300 | .text-grey-lt-300 | .bg-grey-lt-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#light-greys",
    "relUrl": "/docs/utilities/color/#light-greys"
  },"24": {
    "doc": "Color",
    "title": "Dark Greys",
    "content": "| Color value | Font color utility | Background color utility | . | grey-dk-000 | .text-grey-dk-000 | .bg-grey-dk-000 | . | grey-dk-100 | .text-grey-dk-100 | .bg-grey-dk-100 | . | grey-dk-200 | .text-grey-dk-200 | .bg-grey-dk-200 | . | grey-dk-250 | .text-grey-dk-250 | .bg-grey-dk-250 | . | grey-dk-300 | .text-grey-dk-300 | .bg-grey-dk-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#dark-greys",
    "relUrl": "/docs/utilities/color/#dark-greys"
  },"25": {
    "doc": "Color",
    "title": "Purples",
    "content": "| Color value | Font color utility | Background color utility | . | purple-000 | .text-purple-000 | .bg-purple-000 | . | purple-100 | .text-purple-100 | .bg-purple-100 | . | purple-200 | .text-purple-200 | .bg-purple-200 | . | purple-300 | .text-purple-300 | .bg-purple-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#purples",
    "relUrl": "/docs/utilities/color/#purples"
  },"26": {
    "doc": "Color",
    "title": "Blues",
    "content": "| Color value | Font color utility | Background color utility | . | blue-000 | .text-blue-000 | .bg-blue-000 | . | blue-100 | .text-blue-100 | .bg-blue-100 | . | blue-200 | .text-blue-200 | .bg-blue-200 | . | blue-300 | .text-blue-300 | .bg-blue-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#blues",
    "relUrl": "/docs/utilities/color/#blues"
  },"27": {
    "doc": "Color",
    "title": "Greens",
    "content": "| Color value | Font color utility | Background color utility | . | green-000 | .text-green-000 | .bg-green-000 | . | green-100 | .text-green-100 | .bg-green-100 | . | green-200 | .text-green-200 | .bg-green-200 | . | green-300 | .text-green-300 | .bg-green-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#greens",
    "relUrl": "/docs/utilities/color/#greens"
  },"28": {
    "doc": "Color",
    "title": "Yellows",
    "content": "| Color value | Font color utility | Background color utility | . | yellow-000 | .text-yellow-000 | .bg-yellow-000 | . | yellow-100 | .text-yellow-100 | .bg-yellow-100 | . | yellow-200 | .text-yellow-200 | .bg-yellow-200 | . | yellow-300 | .text-yellow-300 | .bg-yellow-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#yellows",
    "relUrl": "/docs/utilities/color/#yellows"
  },"29": {
    "doc": "Color",
    "title": "Reds",
    "content": "| Color value | Font color utility | Background color utility | . | red-000 | .text-red-000 | .bg-red-000 | . | red-100 | .text-red-100 | .bg-red-100 | . | red-200 | .text-red-200 | .bg-red-200 | . | red-300 | .text-red-300 | .bg-red-300 | . ",
    "url": "http://localhost:4000/docs/utilities/color/#reds",
    "relUrl": "/docs/utilities/color/#reds"
  },"30": {
    "doc": "Color",
    "title": "Color",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/color/",
    "relUrl": "/docs/utilities/color/"
  },"31": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": "Just the Docs has some specific configuration parameters that can be defined in your Jekyll site’s _config.yml file. ",
    "url": "http://localhost:4000/docs/configuration/",
    "relUrl": "/docs/configuration/"
  },"32": {
    "doc": "Configuration",
    "title": "Table of contents",
    "content": ". | Site logo | Search | Aux links | Heading anchor links | Footer content | Color scheme | Google Analytics | Document collections | . View this site’s _config.yml file as an example. ",
    "url": "http://localhost:4000/docs/configuration/#table-of-contents",
    "relUrl": "/docs/configuration/#table-of-contents"
  },"33": {
    "doc": "Configuration",
    "title": "Site logo",
    "content": "# Set a path/url to a logo that will be displayed instead of the title logo: \"/assets/images/just-the-docs.png\" . ",
    "url": "http://localhost:4000/docs/configuration/#site-logo",
    "relUrl": "/docs/configuration/#site-logo"
  },"34": {
    "doc": "Configuration",
    "title": "Search",
    "content": "# Enable or disable the site search # Supports true (default) or false search_enabled: true search: # Split pages into sections that can be searched individually # Supports 1 - 6, default: 2 heading_level: 2 # Maximum amount of previews per search result # Default: 3 previews: 3 # Maximum amount of words to display before a matched word in the preview # Default: 5 preview_words_before: 5 # Maximum amount of words to display after a matched word in the preview # Default: 10 preview_words_after: 10 # Set the search token separator # Default: /[\\s\\-/]+/ # Example: enable support for hyphenated search words tokenizer_separator: /[\\s/]+/ # Display the relative url in search results # Supports true (default) or false rel_url: true # Enable or disable the search button that appears in the bottom right corner of every page # Supports true or false (default) button: false . ",
    "url": "http://localhost:4000/docs/configuration/#search",
    "relUrl": "/docs/configuration/#search"
  },"35": {
    "doc": "Configuration",
    "title": "Aux links",
    "content": "# Aux links for the upper right navigation aux_links: \"Just the Docs on GitHub\": - \"//github.com/just-the-docs/just-the-docs\" # Makes Aux links open in a new tab. Default is false aux_links_new_tab: false . ",
    "url": "http://localhost:4000/docs/configuration/#aux-links",
    "relUrl": "/docs/configuration/#aux-links"
  },"36": {
    "doc": "Configuration",
    "title": "Heading anchor links",
    "content": "# Heading anchor links appear on hover over h1-h6 tags in page content # allowing users to deep link to a particular heading on a page. # # Supports true (default) or false heading_anchors: true . ",
    "url": "http://localhost:4000/docs/configuration/#heading-anchor-links",
    "relUrl": "/docs/configuration/#heading-anchor-links"
  },"37": {
    "doc": "Configuration",
    "title": "Footer content",
    "content": "# Footer content # appears at the bottom of every page's main content # Note: The footer_content option is deprecated and will be removed in a future major release. Please use `_includes/footer_custom.html` for more robust markup / liquid-based content. footer_content: \"Copyright &amp;copy; 2017-2020 Patrick Marsceill. Distributed by an &lt;a href=\\\"https://github.com/just-the-docs/just-the-docs/tree/main/LICENSE.txt\\\"&gt;MIT license.&lt;/a&gt;\" # Footer last edited timestamp last_edit_timestamp: true # show or hide edit time - page must have `last_modified_date` defined in the frontmatter last_edit_time_format: \"%b %e %Y at %I:%M %p\" # uses ruby's time format: https://ruby-doc.org/stdlib-2.7.0/libdoc/time/rdoc/Time.html # Footer \"Edit this page on GitHub\" link text gh_edit_link: true # show or hide edit this page link gh_edit_link_text: \"Edit this page on GitHub.\" gh_edit_repository: \"https://github.com/just-the-docs/just-the-docs\" # the github URL for your repo gh_edit_branch: \"main\" # the branch that your docs is served from # gh_edit_source: docs # the source that your files originate from gh_edit_view_mode: \"tree\" # \"tree\" or \"edit\" if you want the user to jump into the editor immediately . note: footer_content is deprecated, but still supported. For a better experience we have moved this into an include called _includes/footer_custom.html which will allow for robust markup / liquid-based content. | the “page last modified” data will only display if a page has a key called last_modified_date, formatted in some readable date format | last_edit_time_format uses Ruby’s DateTime formatter; see examples and more information at this link. | gh_edit_repository is the URL of the project’s GitHub repository | gh_edit_branch is the branch that the docs site is served from; defaults to main | gh_edit_source is the source directory that your project files are stored in (should be the same as site.source) | gh_edit_view_mode is \"tree\" by default, which brings the user to the github page; switch to \"edit\" to bring the user directly into editing mode | . ",
    "url": "http://localhost:4000/docs/configuration/#footer-content",
    "relUrl": "/docs/configuration/#footer-content"
  },"38": {
    "doc": "Configuration",
    "title": "Color scheme",
    "content": "# Color scheme supports \"light\" (default) and \"dark\" color_scheme: dark . Preview dark color scheme . See Customization for more information. ",
    "url": "http://localhost:4000/docs/configuration/#color-scheme",
    "relUrl": "/docs/configuration/#color-scheme"
  },"39": {
    "doc": "Configuration",
    "title": "Google Analytics",
    "content": "# Google Analytics Tracking (optional) # e.g, UA-1234567-89 ga_tracking: UA-5555555-55 ga_tracking_anonymize_ip: true # Use GDPR compliant Google Analytics settings (true by default) . ",
    "url": "http://localhost:4000/docs/configuration/#google-analytics",
    "relUrl": "/docs/configuration/#google-analytics"
  },"40": {
    "doc": "Configuration",
    "title": "Document collections",
    "content": "By default, the navigation and search include normal pages. Instead, you can also use Jekyll collections which group documents semantically together. For example, put all your documentation files in the _docs folder and create the docs collection: . # Define Jekyll collections collections: # Define a collection named \"docs\", its documents reside in the \"_docs\" directory docs: permalink: \"/:collection/:path/\" output: true just_the_docs: # Define which collections are used in just-the-docs collections: # Reference the \"docs\" collection docs: # Give the collection a name name: Documentation # Exclude the collection from the navigation # Supports true or false (default) nav_exclude: false # Exclude the collection from the search # Supports true or false (default) search_exclude: false . You can reference multiple collections. This creates categories in the navigation with the configured names. collections: docs: permalink: \"/:collection/:path/\" output: true tutorials: permalink: \"/:collection/:path/\" output: true just_the_docs: collections: docs: name: Documentation tutorials: name: Tutorials . ",
    "url": "http://localhost:4000/docs/configuration/#document-collections",
    "relUrl": "/docs/configuration/#document-collections"
  },"41": {
    "doc": "Customization",
    "title": "Customization",
    "content": " ",
    "url": "http://localhost:4000/docs/customization/",
    "relUrl": "/docs/customization/"
  },"42": {
    "doc": "Customization",
    "title": "Table of contents",
    "content": ". | Color schemes | Custom schemes . | Define a custom scheme | Use a custom scheme | Switchable custom scheme | . | Override and completely custom styles | . ",
    "url": "http://localhost:4000/docs/customization/#table-of-contents",
    "relUrl": "/docs/customization/#table-of-contents"
  },"43": {
    "doc": "Customization",
    "title": "Color schemes",
    "content": "New . Just the Docs supports two color schemes: light (default), and dark. To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: . Example . # Color scheme supports \"light\" (default) and \"dark\" color_scheme: dark . Preview dark color scheme . ",
    "url": "http://localhost:4000/docs/customization/#color-schemes",
    "relUrl": "/docs/customization/#color-schemes"
  },"44": {
    "doc": "Customization",
    "title": "Custom schemes",
    "content": "Define a custom scheme . You can add custom schemes. If you want to add a scheme named foo (can be any name) just add a file _sass/color_schemes/foo.scss (replace foo by your scheme name) where you override theme variables to change colors, fonts, spacing, etc. Available variables are listed in the _variables.scss file. For example, to change the link color from the purple default to blue, include the following inside your scheme file: . Example . $link-color: $blue-000; . Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail. Please use scheme files. Use a custom scheme . To use the custom color scheme, only set the color_scheme parameter in your site’s _config.yml file: . color_scheme: foo . Switchable custom scheme . If you want to be able to change the scheme dynamically, for example via javascript, just add a file assets/css/just-the-docs-foo.scss (replace foo by your scheme name) with the following content: . --- --- {% include css/just-the-docs.scss.liquid color_scheme=\"foo\" %} . This allows you to switch the scheme via the following javascript. jtd.setTheme(\"foo\") . ",
    "url": "http://localhost:4000/docs/customization/#custom-schemes",
    "relUrl": "/docs/customization/#custom-schemes"
  },"45": {
    "doc": "Customization",
    "title": "Override and completely custom styles",
    "content": "For styles that aren’t defined as variables, you may want to modify specific CSS classes. Additionally, you may want to add completely custom CSS specific to your content. To do this, put your styles in the file _sass/custom/custom.scss. This will allow for all overrides to be kept in a single file, and for any upstream changes to still be applied. For example, if you’d like to add your own styles for printing a page, you could add the following styles. Example . // Print-only styles. @media print { .side-bar, .page-header { display: none; } .main-content { max-width: auto; margin: 1em; } } . ",
    "url": "http://localhost:4000/docs/customization/#override-and-completely-custom-styles",
    "relUrl": "/docs/customization/#override-and-completely-custom-styles"
  },"46": {
    "doc": "Data Structure",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "http://localhost:4000/docs/data-structure/data-structure/#ui-components",
    "relUrl": "/docs/data-structure/data-structure/#ui-components"
  },"47": {
    "doc": "Data Structure",
    "title": "Data Structure",
    "content": " ",
    "url": "http://localhost:4000/docs/data-structure/data-structure/",
    "relUrl": "/docs/data-structure/data-structure/"
  },"48": {
    "doc": "Data Structure Easy Set 1",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/#ui-components",
    "relUrl": "/docs/data-structure/ds-easy-set-1/#ui-components"
  },"49": {
    "doc": "Data Structure Easy Set 1",
    "title": "Data Structure Easy Set 1",
    "content": " ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/",
    "relUrl": "/docs/data-structure/ds-easy-set-1/"
  },"50": {
    "doc": "Data Structure Easy Set 2",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "http://localhost:4000/docs/data-structure/data-structure-easy-set-2#ui-components",
    "relUrl": "/docs/data-structure/data-structure-easy-set-2#ui-components"
  },"51": {
    "doc": "Data Structure Easy Set 2",
    "title": "Data Structure Easy Set 2",
    "content": " ",
    "url": "http://localhost:4000/docs/data-structure/data-structure-easy-set-2",
    "relUrl": "/docs/data-structure/data-structure-easy-set-2"
  },"52": {
    "doc": "Data Structure Easy Set 3",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "http://localhost:4000/docs/data-structure/data-structure-easy-set-3#ui-components",
    "relUrl": "/docs/data-structure/data-structure-easy-set-3#ui-components"
  },"53": {
    "doc": "Data Structure Easy Set 3",
    "title": "Data Structure Easy Set 3",
    "content": " ",
    "url": "http://localhost:4000/docs/data-structure/data-structure-easy-set-3",
    "relUrl": "/docs/data-structure/data-structure-easy-set-3"
  },"54": {
    "doc": "Markdown kitchen sink",
    "title": "Header 1",
    "content": "This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. ",
    "url": "http://localhost:4000/docs/index-test/#header-1",
    "relUrl": "/docs/index-test/#header-1"
  },"55": {
    "doc": "Markdown kitchen sink",
    "title": "Header 2",
    "content": "This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . Header 4 with code not transformed . | This is an unordered list following a header. | This is an unordered list following a header. | This is an unordered list following a header. | . Header 5 . | This is an ordered list following a header. | This is an ordered list following a header. | This is an ordered list following a header. | . Header 6 . | head1 | head two | three | . | ok | good swedish fish | nice | . | out of stock | good and plenty | nice | . | ok | good oreos | hmm | . | ok | good zoute drop | yumm | . There’s a horizontal rule below this. Here is an unordered list: . | Item foo | Item bar | Item baz | Item zip | . And an ordered list: . | Item one | Item two | Item three | Item four | . And a nested list: . | level 1 item . | level 2 item | level 2 item . | level 3 item | level 3 item | . | . | level 1 item . | level 2 item | level 2 item | level 2 item | . | level 1 item . | level 2 item | level 2 item | . | level 1 item | . Nesting an ol in ul in an ol . | level 1 item (ul) . | level 2 item (ol) | level 2 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | . | level 1 item (ul) . | level 2 item (ol) | level 2 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | level 4 item (ol) | level 4 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | . | level 1 item (ul) | . And a task list . | Hello, this is a TODO item | Hello, this is another TODO item | Goodbye, this item is done | . Small image . Large image . “Wroclaw University Library digitizing rare archival texts” by j_cadmus is marked with CC BY 2.0. Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Multiple description terms and values . Term Brief description of Term Longer Term Longer description of Term, possibly more than one line Term First description of Term, possibly more than one line Second description of Term, possibly more than one line . Term1 Term2 Single description of Term1 and Term2, possibly more than one line Term1 Term2 First description of Term1 and Term2, possibly more than one line Second description of Term1 and Term2, possibly more than one line . More code . Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element. ",
    "url": "http://localhost:4000/docs/index-test/#header-2",
    "relUrl": "/docs/index-test/#header-2"
  },"56": {
    "doc": "Markdown kitchen sink",
    "title": "Markdown kitchen sink",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. ",
    "url": "http://localhost:4000/docs/index-test/",
    "relUrl": "/docs/index-test/"
  },"57": {
    "doc": "Home",
    "title": "Learning with Anjan.",
    "content": "Just the Docs gives your documentation a jumpstart with a responsive that is easily customizable. Get started now View it on GitHub . ",
    "url": "http://localhost:4000/#learning-with-anjan",
    "relUrl": "/#learning-with-anjan"
  },"58": {
    "doc": "Home",
    "title": "Getting started",
    "content": "Dependencies . Just the Docs is built for Jekyll, a static site generator. View the quick start guide for more information. Just the Docs requires no special plugins and can run on GitHub Pages’ standard Jekyll compiler. The Jekyll SEO Tag plugin is included by default (no need to run any special installation) to inject SEO and open graph metadata on docs pages. For information on how to configure SEO and open graph metadata visit the Jekyll SEO Tag usage guide. Quick start: Use as a GitHub Pages remote theme . | Add Just the Docs to your Jekyll site’s _config.yml as a remote theme | . remote_theme: just-the-docs/just-the-docs . You must have GitHub Pages enabled on your repo, one or more Markdown files, and a _config.yml file. See an example repository . Local installation: Use the gem-based theme . | Install the Ruby Gem $ gem install just-the-docs . # .. or add it to your your Jekyll site’s Gemfile gem \"just-the-docs\" . | Add Just the Docs to your Jekyll site’s _config.yml theme: \"just-the-docs\" . | Optional: Initialize search data (creates search-data.json) $ bundle exec just-the-docs rake search:init . | Run you local Jekyll server $ jekyll serve . # .. or if you're using a Gemfile (bundler) $ bundle exec jekyll serve . | Point your web browser to http://localhost:4000 | . If you’re hosting your site on GitHub Pages, set up GitHub Pages and Jekyll locally so that you can more easily work in your development environment. Configure Just the Docs . | See configuration options | . ",
    "url": "http://localhost:4000/#getting-started",
    "relUrl": "/#getting-started"
  },"59": {
    "doc": "Home",
    "title": "About the project",
    "content": "Just the Docs is © 2017-2022 by Patrick Marsceill. License . Just the Docs is distributed by an MIT license. Contributing . When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in our GitHub repo. Thank you to the contributors of Just the Docs! . Code of Conduct . Just the Docs is committed to fostering a welcoming community. View our Code of Conduct on our GitHub repository. ",
    "url": "http://localhost:4000/#about-the-project",
    "relUrl": "/#about-the-project"
  },"60": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"61": {
    "doc": "Labels",
    "title": "Labels",
    "content": "Use labels as a way to add an additional mark to a section of your docs. Labels come in a few colors. By default, labels will be blue. Default label . Blue label . Stable . New release . Coming soon . Deprecated . Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } . ",
    "url": "http://localhost:4000/docs/ui-components/labels/",
    "relUrl": "/docs/ui-components/labels/"
  },"62": {
    "doc": "Layout",
    "title": "Layout Utilities",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/layout/#layout-utilities",
    "relUrl": "/docs/utilities/layout/#layout-utilities"
  },"63": {
    "doc": "Layout",
    "title": "Table of contents",
    "content": ". | Spacing | Horizontal Alignment | Vertical Alignment | Display | . ",
    "url": "http://localhost:4000/docs/utilities/layout/#table-of-contents",
    "relUrl": "/docs/utilities/layout/#table-of-contents"
  },"64": {
    "doc": "Layout",
    "title": "Spacing",
    "content": "These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. | Classname prefix | What it does | . | .m- | margin | . | .mx- | margin-left, margin-right | . | .my- | margin top, margin bottom | . | .mt- | margin-top | . | .mr- | margin-right | . | .mb- | margin-bottom | . | .ml- | margin-left | . | Classname prefix | What it does | . | .p- | padding | . | .px- | padding-left, padding-right | . | .py- | padding top, padding bottom | . | .pt- | padding-top | . | .pr- | padding-right | . | .pb- | padding-bottom | . | .pl- | padding-left | . Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: . | Spacer/suffix | Size in rems | Rem converted to px | . | 1 | 0.25rem | 4px | . | 2 | 0.5rem | 8px | . | 3 | 0.75rem | 12px | . | 4 | 1rem | 16px | . | 5 | 1.5rem | 24px | . | 6 | 2rem | 32px | . | 7 | 2.5rem | 40px | . | 8 | 3rem | 48px | . | auto | auto | auto | . Use mx-auto to horizontally center elements. Examples . In Markdown, use the {: } wrapper to apply custom classes: . This paragraph will have a margin bottom of 1rem/16px at large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } . ",
    "url": "http://localhost:4000/docs/utilities/layout/#spacing",
    "relUrl": "/docs/utilities/layout/#spacing"
  },"65": {
    "doc": "Layout",
    "title": "Horizontal Alignment",
    "content": "| Classname | What it does | . | .float-left | float: left | . | .float-right | float: right | . | .flex-justify-start | justify-content: flex-start | . | .flex-justify-end | justify-content: flex-end | . | .flex-justify-between | justify-content: space-between | . | .flex-justify-around | justify-content: space-around | . Note: any of the flex- classes must be used on a parent element that has d-flex applied to it. ",
    "url": "http://localhost:4000/docs/utilities/layout/#horizontal-alignment",
    "relUrl": "/docs/utilities/layout/#horizontal-alignment"
  },"66": {
    "doc": "Layout",
    "title": "Vertical Alignment",
    "content": "| Classname | What it does | . | .v-align-baseline | vertical-align: baseline | . | .v-align-bottom | vertical-align: bottom | . | .v-align-middle | vertical-align: middle | . | .v-align-text-bottom | vertical-align: text-bottom | . | .v-align-text-top | vertical-align: text-top | . | .v-align-top | vertical-align: top | . ",
    "url": "http://localhost:4000/docs/utilities/layout/#vertical-alignment",
    "relUrl": "/docs/utilities/layout/#vertical-alignment"
  },"67": {
    "doc": "Layout",
    "title": "Display",
    "content": "Display classes aid in adapting the layout of the elements on a page: . | Class |   | . | .d-block | display: block | . | .d-flex | display: flex | . | .d-inline | display: inline | . | .d-inline-block | display: inline-block | . | .d-none | display: none | . Use these classes in conjunction with the responsive modifiers. Examples . In Markdown, use the {: } wrapper to apply custom classes: . This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } . ",
    "url": "http://localhost:4000/docs/utilities/layout/#display",
    "relUrl": "/docs/utilities/layout/#display"
  },"68": {
    "doc": "Layout",
    "title": "Layout",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/layout/",
    "relUrl": "/docs/utilities/layout/"
  },"69": {
    "doc": "Code with line numbers",
    "title": "Code snippets with line numbers",
    "content": "The default settings for HTML compression are incompatible with the HTML produced by Jekyll (4.1.1 or earlier) for line numbers from highlighted code – both when using Kramdown code fences and when using Liquid highlight tags. To avoid non-conforming HTML and unsatisfactory layout, HTML compression can be turned off by using the following configuration option: . compress_html: ignore: envs: all . When using Kramdown code fences, line numbers are turned on globally by the following configuration option: . kramdown: syntax_highlighter_opts: block: line_numbers: true . Line numbers can then be suppressed locally using Liquid tags (without the linenos option) instead of fences: . {% highlight some_language %} Some code {% endhighlight %} . ",
    "url": "http://localhost:4000/docs/ui-components/code/line-numbers/#code-snippets-with-line-numbers",
    "relUrl": "/docs/ui-components/code/line-numbers/#code-snippets-with-line-numbers"
  },"70": {
    "doc": "Code with line numbers",
    "title": "Workarounds",
    "content": "To use HTML compression together with line numbers, all highlighted code needs to be wrapped using one of the following workarounds. (The variable name some_var can be changed to avoid clashes; it can also be replaced by code – but note that code=code cannot be removed). Code fences (three backticks) . {% capture some_var %} ```some_language Some code ``` {% endcapture %} {% assign some_var = some_var | markdownify %} {% include fix_linenos.html code=some_var %} . Liquid highlighting . {% capture some_var %} {% highlight some_language linenos %} Some code {% endhighlight %} {% endcapture %} {% include fix_linenos.html code=some_var %} . Credit: The original version of the above workaround was suggested by Dmitry Hrabrov at https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901. ",
    "url": "http://localhost:4000/docs/ui-components/code/line-numbers/#workarounds",
    "relUrl": "/docs/ui-components/code/line-numbers/#workarounds"
  },"71": {
    "doc": "Code with line numbers",
    "title": "Examples",
    "content": "✅ Using code fences + workaround (will only show line numbers if enabled globally in _config.yml): . // Javascript code with syntax highlighting in fences var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ✅ Using liquid highlighting + workaround: . | 1 2 3 4 . | # Ruby code with syntax highlighting and fixed line numbers using Liquid GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . | . ❌ With the default configuration options, the following example illustrates the incorrect formatting arising from the incompatibility of HTML compression and the non-conforming HTML produced by Jekyll for line numbers: . | 1 2 3 4 . | # Ruby code with syntax highlighting and unfixed line numbers using Liquid GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . | . ",
    "url": "http://localhost:4000/docs/ui-components/code/line-numbers/#examples",
    "relUrl": "/docs/ui-components/code/line-numbers/#examples"
  },"72": {
    "doc": "Code with line numbers",
    "title": "Code with line numbers",
    "content": " ",
    "url": "http://localhost:4000/docs/ui-components/code/line-numbers/",
    "relUrl": "/docs/ui-components/code/line-numbers/"
  },"73": {
    "doc": "Lists",
    "title": "Lists",
    "content": " ",
    "url": "http://localhost:4000/docs/ui-components/lists/",
    "relUrl": "/docs/ui-components/lists/"
  },"74": {
    "doc": "Lists",
    "title": "Table of contents",
    "content": ". | Unordered list | Ordered list | Task list | Definition list | . Most lists can be rendered with pure Markdown. ",
    "url": "http://localhost:4000/docs/ui-components/lists/#table-of-contents",
    "relUrl": "/docs/ui-components/lists/#table-of-contents"
  },"75": {
    "doc": "Lists",
    "title": "Unordered list",
    "content": ". | Item 1 | Item 2 | Item 3 | . or . | Item 1 | Item 2 | Item 3 | . - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 . ",
    "url": "http://localhost:4000/docs/ui-components/lists/#unordered-list",
    "relUrl": "/docs/ui-components/lists/#unordered-list"
  },"76": {
    "doc": "Lists",
    "title": "Ordered list",
    "content": ". | Item 1 | Item 2 | Item 3 | . 1. Item 1 1. Item 2 1. Item 3 . ",
    "url": "http://localhost:4000/docs/ui-components/lists/#ordered-list",
    "relUrl": "/docs/ui-components/lists/#ordered-list"
  },"77": {
    "doc": "Lists",
    "title": "Task list",
    "content": ". | hello, this is a todo item | hello, this is another todo item | goodbye, this item is done | . - [ ] hello, this is a todo item - [ ] hello, this is another todo item - [x] goodbye, this item is done . ",
    "url": "http://localhost:4000/docs/ui-components/lists/#task-list",
    "relUrl": "/docs/ui-components/lists/#task-list"
  },"78": {
    "doc": "Lists",
    "title": "Definition list",
    "content": "Definition lists require HTML syntax and aren’t supported with the GitHub Flavored Markdown compiler. Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt; . ",
    "url": "http://localhost:4000/docs/ui-components/lists/#definition-list",
    "relUrl": "/docs/ui-components/lists/#definition-list"
  },"79": {
    "doc": "Navigation Structure",
    "title": "Navigation Structure",
    "content": ". | Navigation Structure . | Main navigation | Ordering pages . | Example | . | Excluding pages . | Example | . | Pages with children . | Example | Child pages . | Example | . | Auto-generating Table of Contents . | Example | . | Children with children . | Example | . | . | Auxiliary Links . | Example | . | In-page navigation with Table of Contents . | Example | Collapsible Table of Contents | . | . | . ",
    "url": "http://localhost:4000/docs/navigation-structure/",
    "relUrl": "/docs/navigation-structure/"
  },"80": {
    "doc": "Navigation Structure",
    "title": "Main navigation",
    "content": "The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). ",
    "url": "http://localhost:4000/docs/navigation-structure/#main-navigation",
    "relUrl": "/docs/navigation-structure/#main-navigation"
  },"81": {
    "doc": "Navigation Structure",
    "title": "Ordering pages",
    "content": "To specify a page order, you can use the nav_order parameter in your pages’ YAML front matter. Example . --- layout: default title: Customization nav_order: 4 --- . The parameter values determine the order of the top-level pages, and of child pages with the same parent. You can reuse the same parameter values (e.g., integers starting from 1) for the child pages of different parents. The parameter values can be numbers (integers, floats) and/or strings. When you omit nav_order parameters, they default to the titles of the pages, which are ordered alphabetically. Pages with numerical nav_order parameters always come before those with strings or default nav_order parameters. If you want to make the page order independent of the page titles, you can set explicit nav_order parameters on all pages. By default, all Capital letters come before all lowercase letters; you can add nav_sort: case_insensitive in the configuration file to ignore the case. Enclosing strings in quotation marks is optional. Note for users of previous versions: nav_sort: case_insensitive previously affected the ordering of numerical nav_order parameters: e.g., 10 came before 2. Also, all pages with explicit nav_order parameters previously came before all pages with default parameters. Both were potentially confusing, and they have now been eliminated. ",
    "url": "http://localhost:4000/docs/navigation-structure/#ordering-pages",
    "relUrl": "/docs/navigation-structure/#ordering-pages"
  },"82": {
    "doc": "Navigation Structure",
    "title": "Excluding pages",
    "content": "For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. Example . --- layout: default title: 404 nav_exclude: true --- . The nav_exclude parameter does not affect the auto-generating list of child pages, which you can use to access pages excluded from the main navigation. Pages with no title are automatically excluded from the navigation. ",
    "url": "http://localhost:4000/docs/navigation-structure/#excluding-pages",
    "relUrl": "/docs/navigation-structure/#excluding-pages"
  },"83": {
    "doc": "Navigation Structure",
    "title": "Pages with children",
    "content": "Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: . +-- .. |-- (Jekyll files) |-- docs |-- ui-components | |-- index.md (parent page) | |-- buttons.md | |-- code.md | |-- labels.md | |-- tables.md | +-- typography.md | |-- utilities | |-- index.md (parent page) | |-- color.md | |-- layout.md | |-- responsive-modifiers.md | +-- typography.md | |-- (other md files, pages with no children) | +-- .. |-- (Jekyll files) +-- .. On the parent pages, add this YAML front matter parameter: . | has_children: true (tells us that this is a parent page) | . Example . --- layout: default title: UI Components nav_order: 2 has_children: true --- . Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. Child pages . On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). Example . --- layout: default title: Buttons parent: UI Components nav_order: 2 --- . The Buttons page appears as a child of UI Components and appears second in the UI Components section. Auto-generating Table of Contents . By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. Example . --- layout: default title: UI Components nav_order: 2 has_children: true has_toc: false --- . Children with children . Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. | Add the has_children attribute to the child | Add the parent and grand_parent attribute to the grandchild | . Example . --- layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true --- . --- layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 --- . This would create the following navigation structure: . +-- .. |-- UI Components |-- .. | |-- Buttons | |-- Button Child Page | |-- .. | +-- .. ",
    "url": "http://localhost:4000/docs/navigation-structure/#pages-with-children",
    "relUrl": "/docs/navigation-structure/#pages-with-children"
  },"84": {
    "doc": "Navigation Structure",
    "title": "Auxiliary Links",
    "content": "To add auxiliary links to your site (in the upper right on all pages), add it to the aux_links configuration option in your site’s _config.yml file. Example . # Aux links for the upper right navigation aux_links: \"Just the Docs on GitHub\": - \"//github.com/just-the-docs/just-the-docs\" . ",
    "url": "http://localhost:4000/docs/navigation-structure/#auxiliary-links",
    "relUrl": "/docs/navigation-structure/#auxiliary-links"
  },"85": {
    "doc": "Navigation Structure",
    "title": "In-page navigation with Table of Contents",
    "content": "To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. Example . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. To get an unordered list, replace 1. TOC above by - TOC. Collapsible Table of Contents . The Table of Contents can be made collapsible using the &lt;details&gt; and &lt;summary&gt; elements , as in the following example. The attribute open (expands the Table of Contents by default) and the styling with {: .text-delta } are optional. &lt;details open markdown=\"block\"&gt; &lt;summary&gt; &lt;/summary&gt; {: .text-delta } 1. TOC {:toc} &lt;/details&gt; . The result is shown at the top of this page ({:toc} can be used only once on each page). ",
    "url": "http://localhost:4000/docs/navigation-structure/#in-page-navigation-with-table-of-contents",
    "relUrl": "/docs/navigation-structure/#in-page-navigation-with-table-of-contents"
  },"86": {
    "doc": "Two Sum",
    "title": "1. Two Sum",
    "content": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: . Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: . Input: nums = [3,2,4], target = 6 Output: [1,2] . Example 3: . Input: nums = [3,3], target = 6 Output: [0,1] . Constraints: . 2 &lt;= nums.length &lt;= 104 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109 . Only one valid answer exists. Solution . Time Complexity: O(n) Space Complexity: O(n) . class Solution { public int[] twoSum(int[] nums, int target) { HashMap&lt;Integer, Integer&gt; map = new HashMap(); int [] result = new int[2]; result[0] = -1; result[1] = -1; for(int i=0; i&lt;nums.length; i++){ if(map.containsKey(target - nums[i])){ result[0] = map.get(target - nums[i]); result[1] = i; }else{ map.put(nums[i],i); } } return result; } } . Related solution . Since elements are not sorted, we can sort the list in O(nlog(n)) complexity. Space complexity O(1) . class Solution { public boolean twoSum(int[] nums, int target) { Arrays.sort(nums); int i = 0; int j = nums.length - 1; while(i&lt;j){ if(nums[i] + nums[j] == target){ return true; } if(nums[i] + nums[j] &gt; target){ j--; }else{ i++; } } return false; } } . ",
    "url": "http://localhost:4000/problem-1-two-sum/#1-two-sum",
    "relUrl": "/problem-1-two-sum/#1-two-sum"
  },"87": {
    "doc": "Two Sum",
    "title": "Two Sum",
    "content": " ",
    "url": "http://localhost:4000/problem-1-two-sum/",
    "relUrl": "/problem-1-two-sum/"
  },"88": {
    "doc": "Search Insert Position",
    "title": "Search Insert Position",
    "content": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity. Example 1: . Input: nums = [1,3,5,6], target = 5 Output: 2 . Example 2: . Input: nums = [1,3,5,6], target = 2 Output: 1 . Example 3: . Input: nums = [1,3,5,6], target = 7 Output: 4 . Constraints: . | 1 &lt;= nums.length &lt;= 104 | -104 &lt;= nums[i] &lt;= 104 | nums contains distinct values sorted in ascending order. | -104 &lt;= target &lt;= 104 | . Solution . class Solution { public int searchInsert(int[] nums, int target) { if(nums == null || nums.length == 0) return 0; int i = 0; // start index int j = nums.length-1; // last index while(i&lt;=j){ int mid = (i + j)/2; // middle index if(nums[mid] == target) return mid; // stop iterating when get target in our array else if(nums[mid] &lt; target) i = mid + 1; // goto right-half in array else j = mid - 1; // goto left half in array } return i; } } . ",
    "url": "http://localhost:4000/problem-10-search-insert-position/",
    "relUrl": "/problem-10-search-insert-position/"
  },"89": {
    "doc": "Maximum Subarray",
    "title": "Maximum Subarray",
    "content": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array. Example 1: . Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Example 2: . Input: nums = [1] Output: 1 . Example 3: . Input: nums = [5,4,-1,7,8] Output: 23 . Constraints: . | 1 &lt;= nums.length &lt;= 105 | -104 &lt;= nums[i] &lt;= 104 | . Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. class Solution { public int maxSubArray(int[] nums) { int prevSum = nums[0]; int currentSum = nums[0]; for(int i = 1; i &lt; nums.length; i++){ if(currentSum + nums[i]&lt; nums[i]){ currentSum = nums[i]; }else{ currentSum += nums[i]; } prevSum = Math.max(prevSum, currentSum); } return Math.max(prevSum, currentSum); } } . ",
    "url": "http://localhost:4000/problem-11-maximum-subarray/",
    "relUrl": "/problem-11-maximum-subarray/"
  },"90": {
    "doc": "Length of Last Word",
    "title": "Length of Last Word",
    "content": "Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only. Example 1: . Input: s = \"Hello World\" Output: 5 Explanation: The last word is \"World\" with length 5. Example 2: . Input: s = \" fly me to the moon \" Output: 4 Explanation: The last word is \"moon\" with length 4. Example 3: . Input: s = \"luffy is still joyboy\" Output: 6 Explanation: The last word is \"joyboy\" with length 6. Constraints: . | 1 &lt;= s.length &lt;= 104 | s consists of only English letters and spaces ‘ ‘. | There will be at least one word in s. | . Solution . class Solution { public int lengthOfLastWord(String s) { int l = 0; s = s.trim(); for(int i = s.length()-1; i&gt;=0; i--){ if(s.charAt(i) == ' ') break; l++; } return l; } } . ",
    "url": "http://localhost:4000/problem-12-length-of-last-word/",
    "relUrl": "/problem-12-length-of-last-word/"
  },"91": {
    "doc": "Plus One",
    "title": "Plus One",
    "content": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s. Increment the large integer by one and return the resulting array of digits. Example 1: . Input: digits = [1,2,3] Output: [1,2,4] Explanation: The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4]. Example 2: . Input: digits = [4,3,2,1] Output: [4,3,2,2] Explanation: The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2]. Example 3: . Input: digits = [9] Output: [1,0] Explanation: The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0]. Constraints: . | 1 &lt;= digits.length &lt;= 100 | 0 &lt;= digits[i] &lt;= 9 | digits does not contain any leading 0’s. | . Solution . class Solution { public int[] plusOne(int[] digits) { for(int i=digits.length-1; i&gt;=0; i--){ if(digits[i] &lt; 9){ digits[i] = digits[i] + 1; break; }else{ digits[i] = 0; } } if(digits[0] == 0){ int[] updatedDigits = new int[digits.length+1]; updatedDigits[0] = 1; for(int i=0; i&lt;digits.length; i++){ updatedDigits[i+1] = digits[i]; } return updatedDigits; } return digits; } } . Other . class Solution { public int[] plusOne(int[] digits) { int []result = new int[digits.length+1]; result[digits.length] = (digits[digits.length-1]+1)%10; int c = (digits[digits.length-1]+1)/10; digits[digits.length-1] = (digits[digits.length-1]+1)%10; int c1 = c; for(int i = digits.length-2; i&gt;=0; i--){ result[i+1] = (digits[i]+c1)%10; c = (digits[i]+c)/10; digits[i] = (digits[i]+c1)%10; c1 = c; } result[0] = c; if(c&gt;0){ return result; } return digits; } } . ",
    "url": "http://localhost:4000/problem-13-plus-one/",
    "relUrl": "/problem-13-plus-one/"
  },"92": {
    "doc": "Add Binary",
    "title": "Add Binary",
    "content": "Given two binary strings a and b, return their sum as a binary string. Example 1: . Input: a = \"11\", b = \"1\" Output: \"100\" . Example 2: . Input: a = \"1010\", b = \"1011\" Output: \"10101\" . Constraints: . | 1 &lt;= a.length, b.length &lt;= 104 | a and b consist only of ‘0’ or ‘1’ characters. | Each string does not contain leading zeros except for the zero itself. | . Solution . class Solution { public String addBinary(String a, String b) { int reminder = 0; int i = a.length() - 1; int j = b.length() - 1; int p1, p2, sum; StringBuilder sb = new StringBuilder(); while(i &gt;= 0 || j &gt;= 0 || reminder&gt;0){ p1 = i&gt;=0? a.charAt(i)-48: 0; p2 = j&gt;=0? b.charAt(j)-48: 0; sum = (p1+p2+reminder)%2; sb.append(sum); reminder = (p1+p2+reminder)/2; j--; i--; } return sb.reverse().toString(); } } . ",
    "url": "http://localhost:4000/problem-14-add-binary/",
    "relUrl": "/problem-14-add-binary/"
  },"93": {
    "doc": "Sqrt(x)",
    "title": "Sqrt(x)",
    "content": "Given a non-negative integer x, compute and return the square root of x. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned. Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5. Example 1: . Input: x = 4 Output: 2 . Example 2: . Input: x = 8 Output: 2 Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned. Constraints: . | 0 &lt;= x &lt;= 231 - 1 | . Solution . class Solution { public int mySqrt(int x) { if(x&lt;2) return x; int start = 2; int end = x/2; int mid = (start+end)/2; long res; while(start &lt;= end){ res = (long)mid*mid; if(res == x) return mid; if(res&gt;x) end = mid - 1; else start = mid + 1; mid = (start+end)/2; } return mid; } } . ",
    "url": "http://localhost:4000/problem-15-sqrt/",
    "relUrl": "/problem-15-sqrt/"
  },"94": {
    "doc": "Climbing Stairs",
    "title": "Climbing Stairs",
    "content": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? . Example 1: . Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps . Example 2: . Input: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step . Constraints: . | 1 &lt;= n &lt;= 45 | . Solution . class Solution { public int climbStairs(int n) { if(n &lt;= 2) return n; int[] dp = new int[n+1]; dp[1] = 1; dp[2] = 2; for(int i = 3; i &lt;= n; i++) dp[i] = dp[i-1] + dp[i-2]; return dp[n]; } } . Recursion . class Solution { HashMap&lt;Integer, Integer&gt; map = new HashMap(); public int climbStairs(int n) { if(map.containsKey(n)) return map.get(n); if(n == 1){ map.put(1, 1); return 1; } if(n == 2) { map.put(2, 2); return 2; } int x = climbStairs(n-1) + climbStairs(n-2); map.put(n,x); return map.get(n); } } . ",
    "url": "http://localhost:4000/problem-16-climbing-stairs/",
    "relUrl": "/problem-16-climbing-stairs/"
  },"95": {
    "doc": "Remove Duplicates from Sorted Linked List",
    "title": "Remove Duplicates from Sorted List",
    "content": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well. Example 1 . Input: head = [1,1,2] Output: [1,2] . Example 2 . Input: head = [1,1,2,3,3] Output: [1,2,3] . Constraints: . | The number of nodes in the list is in the range [0, 300]. | -100 &lt;= Node.val &lt;= 100 | The list is guaranteed to be sorted in ascending order. | . Solution . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null || head.next == null ) return head; ListNode res, ptr, rem; // create first node res = ptr = head; int currVal = head.val; head = head.next; res.next = null; while(head != null){ if(head.val == currVal){ rem = head; head = head.next; rem.next = null; }else{ ptr.next = head; ptr = ptr.next; head = head.next; ptr.next = null; currVal = ptr.val; } } return res; } } . ",
    "url": "http://localhost:4000/problem-17-remove-duplicates-from-sorted-list/#remove-duplicates-from-sorted-list",
    "relUrl": "/problem-17-remove-duplicates-from-sorted-list/#remove-duplicates-from-sorted-list"
  },"96": {
    "doc": "Remove Duplicates from Sorted Linked List",
    "title": "Remove Duplicates from Sorted Linked List",
    "content": " ",
    "url": "http://localhost:4000/problem-17-remove-duplicates-from-sorted-list/",
    "relUrl": "/problem-17-remove-duplicates-from-sorted-list/"
  },"97": {
    "doc": "Merge Sorted Array",
    "title": "Merge Sorted Array",
    "content": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. Example 1: . Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Example 2: . Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. Example 3: . Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1. Constraints: . | nums1.length == m + n | nums2.length == n | 0 &lt;= m, n &lt;= 200 | 1 &lt;= m + n &lt;= 200 | -109 &lt;= nums1[i], nums2[j] &lt;= 109 | . Solution . class Solution { public void merge(int[] nums1, int m, int[] nums2, int n) { if(n == 0) return; int i = m + n - 1; n --; m --; while(n &gt;= 0){ if(m &gt;= 0 &amp;&amp; nums1[m] &gt; nums2[n]){ nums1[i] = nums1[m]; m--; }else{ nums1[i] = nums2[n]; n --; } i --; } } } . ",
    "url": "http://localhost:4000/problem-18-merge-sorted-array/",
    "relUrl": "/problem-18-merge-sorted-array/"
  },"98": {
    "doc": "Binary Tree Inorder Traversal",
    "title": "Binary Tree Inorder Traversal",
    "content": "Given the root of a binary tree, return the inorder traversal of its nodes’ values. Example 1: . Input: root = [1,null,2,3] Output: [1,3,2] . Example 2: . Input: root = [] Output: [] . Example 3: . Input: root = [1] Output: [1] . Constraints: . | The number of nodes in the tree is in the range [0, 100]. | -100 &lt;= Node.val &lt;= 100 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { List&lt;Integer&gt; val = new ArrayList(); public List&lt;Integer&gt; inorderTraversal(TreeNode root) { if(root == null) return new ArrayList&lt;Integer&gt;(); inorderTraversal(root.left); val.add(root.val); inorderTraversal(root.right); return val; } } . ",
    "url": "http://localhost:4000/problem-19-Binary-Tree-Inorder-Traversal/",
    "relUrl": "/problem-19-Binary-Tree-Inorder-Traversal/"
  },"99": {
    "doc": "Palindrome Number",
    "title": "2. Palindrome Number",
    "content": "Given an integer x, return true if x is palindrome integer. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not. Example 1: . Input: x = 121 Output: true Explanation: 121 reads as 121 from left to right and from right to left. Example 2: . Input: x = -121 Output: false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3: . Input: x = 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome. Constraints: . -231 &lt;= x &lt;= 231 - 1 . Solution . class Solution { public boolean isPalindrome(int x) { if(x &lt; 0) return false; int rev = 0; int original = x; while(x &gt; 0){ rev = rev*10 + x%10; x = x/10; } return rev == original? true : false; } } . Complexity Analysis: . | Time complexity : O(log10(n)). We divided the input by 10 for every iteration, so the time complexity is O(log10(n)) . | Space complexity : O(1)O(1). | . ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/problem-2-Palindrome-Number/#2-palindrome-number",
    "relUrl": "/docs/data-structure/ds-easy-set-1/problem-2-Palindrome-Number/#2-palindrome-number"
  },"100": {
    "doc": "Palindrome Number",
    "title": "Palindrome Number",
    "content": " ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/problem-2-Palindrome-Number/",
    "relUrl": "/docs/data-structure/ds-easy-set-1/problem-2-Palindrome-Number/"
  },"101": {
    "doc": "Same Tree",
    "title": "Same Tree",
    "content": "Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value. Example 1: . Input: p = [1,2,3], q = [1,2,3] Output: true . Example 2 . Input: p = [1,2], q = [1,null,2] Output: false . Example 3: . Input: p = [1,2,1], q = [1,1,2] Output: false . Constraints: . | The number of nodes in both trees is in the range [0, 100]. | -104 &lt;= Node.val &lt;= 104 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSameTree(TreeNode p, TreeNode q) { if(p == null &amp;&amp; q == null) return true; if(p != null &amp;&amp; q == null) return false; if(p == null &amp;&amp; q != null) return false; if(p.val != q.val) return false; return isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right); } } . ",
    "url": "http://localhost:4000/problem-20-Same-Tree/",
    "relUrl": "/problem-20-Same-Tree/"
  },"102": {
    "doc": "Symmetric Tree",
    "title": "Symmetric Tree",
    "content": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center). Example 1: . Input: root = [1,2,2,3,4,4,3] Output: true . Example 2: . Input: root = [1,2,2,null,3,null,3] Output: false . Constraints: . | The number of nodes in the tree is in the range [1, 1000]. | -100 &lt;= Node.val &lt;= 100 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric(TreeNode root) { if(root == null) return true; return checkMiror(root.left, root.right); } public boolean checkMiror(TreeNode t1, TreeNode t2){ if(t1 == null || t2 == null) return t1 == t2; if(t1.val == t2.val) return checkMiror(t1.left, t2.right) &amp;&amp; checkMiror(t1.right, t2.left); return false; } } . ",
    "url": "http://localhost:4000/problem-21-Symmetric-Tree/",
    "relUrl": "/problem-21-Symmetric-Tree/"
  },"103": {
    "doc": "Maximum Depth of Binary Tree",
    "title": "Maximum Depth of Binary Tree",
    "content": "Given the root of a binary tree, return its maximum depth. A binary tree’s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Example 1: . Input: root = [3,9,20,null,null,15,7] Output: 3 . Example 2: . Input: root = [1,null,2] Output: 2 . Constraints: . | The number of nodes in the tree is in the range [0, 104]. | -100 &lt;= Node.val &lt;= 100 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int maxDepth(TreeNode root) { if(root == null ) return 0; if(root.left == null &amp;&amp; root.right == null) return 1; return 1 + Math.max(maxDepth(root.left), maxDepth(root.right)); } } . ",
    "url": "http://localhost:4000/problem-22-Maximum-Depth-of-Binary-Tree/",
    "relUrl": "/problem-22-Maximum-Depth-of-Binary-Tree/"
  },"104": {
    "doc": "Convert Sorted Array to Binary Search Tree",
    "title": "Convert Sorted Array to Binary Search Tree",
    "content": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one. Example 1: . Input: nums = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: [0,-10,5,null,-3,null,9] is also accepted: . Example 2: . Input: nums = [1,3] Output: [3,1] Explanation: [1,null,3] and [3,1] are both height-balanced BSTs. Constraints: . | 1 &lt;= nums.length &lt;= 104 | -104 &lt;= nums[i] &lt;= 104 | nums is sorted in a strictly increasing order. | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode sortedArrayToBST(int[] nums) { return convertBalancedTree(null, nums, 0, nums.length-1); } public TreeNode convertBalancedTree(TreeNode head, int[] nums, int s, int e){ if(s&gt;e) return head; int mid = (s+e)/2; head = new TreeNode(nums[mid]); head.left = convertBalancedTree(head.left, nums, s, mid-1); head.right = convertBalancedTree(head.right, nums, mid+1, e); return head; } } . ",
    "url": "http://localhost:4000/problem-23-Convert-Sorted-Array-to-Binary-Search-Tree/",
    "relUrl": "/problem-23-Convert-Sorted-Array-to-Binary-Search-Tree/"
  },"105": {
    "doc": "Balanced Binary Tree",
    "title": "Balanced Binary Tree",
    "content": "Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as: . a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Example 1: . Input: root = [3,9,20,null,null,15,7] Output: true . Example 2: . Input: root = [1,2,2,3,3,null,null,4,4] Output: false . Example 3: . Input: root = [] Output: true . Constraints: . | The number of nodes in the tree is in the range [0, 5000]. | -104 &lt;= Node.val &lt;= 104 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { private boolean isBalanced = true; public boolean isBalanced(TreeNode root) { if(root == null) return true; if(root.left == null &amp;&amp; root.right == null) return true; getMaxDepth(root); return isBalanced; } public int getMaxDepth(TreeNode head){ if(head == null) return 0; if(head.left == null &amp;&amp; head.right == null) return 1; int left = getMaxDepth(head.left); int right = getMaxDepth(head.right); if(Math.abs(left - right) &gt; 1){ isBalanced = false; } return 1+ Math.max(left,right); } } . ",
    "url": "http://localhost:4000/problem-24-Balanced-Binary-Tree/",
    "relUrl": "/problem-24-Balanced-Binary-Tree/"
  },"106": {
    "doc": "Minimum Depth of Binary Tree",
    "title": "Minimum Depth of Binary Tree",
    "content": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. Note: A leaf is a node with no children. Example 1: . Input: root = [3,9,20,null,null,15,7] Output: 2 . Example 2: . Input: root = [2,null,3,null,4,null,5,null,6] Output: 5 . Constraints: . | The number of nodes in the tree is in the range [0, 105]. | -1000 &lt;= Node.val &lt;= 1000 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int minDepth(TreeNode root) { if(root == null) return 0; if(root.left == null &amp;&amp; root.right == null) return 1; int left = Integer.MAX_VALUE; int right = Integer.MAX_VALUE; if(root.left != null) { left = minDepth(root.left); } if(root.right != null){ right = minDepth(root.right); } return 1 + Math.min(left,right ); } } . Non-recursive . class Solution { public int minDepth(TreeNode root) { if (root == null) return 0; Queue&lt;TreeNode&gt; queue = new ArrayDeque&lt;&gt;(); queue.offer(root); int depth = 1; while (true){ int level = queue.size(); for (int i = 0; i &lt; level; i++){ TreeNode data = queue.poll(); if (data.left == null &amp;&amp; data.right == null) return depth; if (data.left != null) queue.offer(data.left); if (data.right != null) queue.offer(data.right); } depth++; } } } . ",
    "url": "http://localhost:4000/problem-25-Minimum-Depth-of-Binary-Tree/",
    "relUrl": "/problem-25-Minimum-Depth-of-Binary-Tree/"
  },"107": {
    "doc": "Path Sum",
    "title": "Path Sum",
    "content": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum. A leaf is a node with no children. Example 1: . Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true Explanation: The root-to-leaf path with the target sum is shown. Example 2: . Input: root = [1,2,3], targetSum = 5 Output: false Explanation: There two root-to-leaf paths in the tree: (1 --&gt; 2): The sum is 3. (1 --&gt; 3): The sum is 4. There is no root-to-leaf path with sum = 5. Example 3: . Input: root = [], targetSum = 0 Output: false Explanation: Since the tree is empty, there are no root-to-leaf paths. Constraints: . | The number of nodes in the tree is in the range [0, 5000]. | -1000 &lt;= Node.val &lt;= 1000 | -1000 &lt;= targetSum &lt;= 1000 | . Solution . Non-Recursive . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean hasPathSum(TreeNode root, int targetSum) { if(root == null) return false; Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;(); Map&lt;TreeNode, Relation&gt; map = new HashMap&lt;TreeNode, Relation&gt;(); stack.push(root); map.put(root, new Relation(null, root.val)); TreeNode ptr; int sum = 0; Relation rl; while(!stack.isEmpty()){ ptr = stack.pop(); rl = map.get(ptr); if(rl.parent != null){ sum = map.get(rl.parent).sumVal + ptr.val; }else{ sum = ptr.val; } if(ptr.left == null &amp;&amp; ptr.right == null &amp;&amp; sum == targetSum) return true; if(ptr.right != null) { stack.push(ptr.right); map.put(ptr.right,new Relation(ptr, sum+ptr.right.val)); } if(ptr.left != null) { stack.push(ptr.left); map.put(ptr.left,new Relation(ptr, sum+ptr.left.val)); } } return false; } } class Relation{ public TreeNode parent; public int sumVal; public Relation(TreeNode node, int val){ parent = node; sumVal = val; } } . Recursive . class Solution { public boolean hasPathSum(TreeNode root, int targetSum) { if (root == null) return false; return solve(root, targetSum); } public boolean solve(TreeNode root, int targetSum) { if (root == null) return false; if (root != null &amp;&amp; root.left == null &amp;&amp; root.right == null) { return (targetSum-root.val) == 0; } boolean a = solve(root.left, targetSum-root.val); boolean b = solve(root.right, targetSum-root.val); return a || b; } } . ",
    "url": "http://localhost:4000/problem-26-Path-Sum/",
    "relUrl": "/problem-26-Path-Sum/"
  },"108": {
    "doc": "Pascal's Triangle",
    "title": "Pascal’s Triangle",
    "content": "Given an integer numRows, return the first numRows of Pascal’s triangle. In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown: . Example 1: . Input: numRows = 5 Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] . Example 2: . Input: numRows = 1 Output: [[1]] . Constraints: . 1 &lt;= numRows &lt;= 30 . ",
    "url": "http://localhost:4000/problem-27-Pascal-Triangle/#pascals-triangle",
    "relUrl": "/problem-27-Pascal-Triangle/#pascals-triangle"
  },"109": {
    "doc": "Pascal's Triangle",
    "title": "Pascal's Triangle",
    "content": " ",
    "url": "http://localhost:4000/problem-27-Pascal-Triangle/",
    "relUrl": "/problem-27-Pascal-Triangle/"
  },"110": {
    "doc": "Valid Palindrome",
    "title": "Valid Palindrome",
    "content": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise. Example 1: . Input: s = \"A man, a plan, a canal: Panama\" Output: true Explanation: \"amanaplanacanalpanama\" is a palindrome. Example 2: . Input: s = \"race a car\" Output: false Explanation: \"raceacar\" is not a palindrome. Example 3: . Input: s = \" \" Output: true Explanation: s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome. Constraints: . | 1 &lt;= s.length &lt;= 2 * 105 | s consists only of printable ASCII characters. | . Solution . class Solution { public boolean isPalindrome(String s) { StringBuffer sb = new StringBuffer(); s = s.toLowerCase().trim(); for(int i=0; i&lt;s.length(); i++){ if(Character.isLetter(s.charAt(i)) || Character.isDigit(s.charAt(i))) sb.append(s.charAt(i)); } String str = sb.toString(); if(str.equals(\" \")) return true; return str.equals(sb.reverse().toString()); } } . ",
    "url": "http://localhost:4000/problem-27-Valid-Palindrome/",
    "relUrl": "/problem-27-Valid-Palindrome/"
  },"111": {
    "doc": "Single Number",
    "title": "Single Number",
    "content": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space. Example 1: . Input: nums = [2,2,1] Output: 1 . Example 2: . Input: nums = [4,1,2,1,2] Output: 4 . Example 3: . Input: nums = [1] Output: 1 . Constraints: . | 1 &lt;= nums.length &lt;= 3 * 104 | -3 * 104 &lt;= nums[i] &lt;= 3 * 104 | Each element in the array appears twice except for one element which appears only once. | . Solution . XOR . class Solution { public int singleNumber(int[] nums) { int x = nums[0]; for(int i=1; i&lt;nums.length; i++){ x = x^nums[i]; } return x; } } . ",
    "url": "http://localhost:4000/problem-29-Single-Number/",
    "relUrl": "/problem-29-Single-Number/"
  },"112": {
    "doc": "Roman to Integer",
    "title": "3.  Roman to Integer",
    "content": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 . For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: . | I can be placed before V (5) and X (10) to make 4 and 9. | X can be placed before L (50) and C (100) to make 40 and 90. | C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer. | . Example 1: . Input: s = \"III\" Output: 3 Explanation: III = 3. Example 2: . Input: s = \"LVIII\" Output: 58 Explanation: L = 50, V= 5, III = 3. Example 3: . Input: s = \"MCMXCIV\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Constraints: . | 1 &lt;= s.length &lt;= 15 | s contains only the characters (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’). | It is guaranteed that s is a valid roman numeral in the range [1, 3999]. | . Solution: . class Solution { public int romanToInt(String s) { int sum = 0; char ch; for(int i = 0; i&lt;s.length(); i++){ ch = s.charAt(i); if(ch == 'I'){ if( i+1 &lt;s.length() &amp;&amp; s.charAt(i+1) == 'V'){ sum = sum + 4; i++; }else if(i+1 &lt;s.length() &amp;&amp; s.charAt(i+1) == 'X'){ sum = sum + 9; i++; }else{ sum = sum + 1; } }else if(ch == 'V'){ sum = sum + 5; }else if(ch == 'X'){ if(i+1 &lt;s.length() &amp;&amp; s.charAt(i+1) == 'L'){ sum = sum + 40; i++; }else if(i+1 &lt;s.length() &amp;&amp; s.charAt(i+1) == 'C'){ sum = sum + 90; i++; }else{ sum = sum + 10; } }else if(ch == 'L'){ sum = sum + 50; }else if(ch == 'C'){ if(i+1 &lt;s.length() &amp;&amp; s.charAt(i+1) == 'D'){ sum = sum + 400; i++; }else if(i+1&lt;s.length() &amp;&amp; s.charAt(i+1) == 'M'){ sum = sum + 900; i++; }else{ sum = sum + 100; } }else if(ch == 'D'){ sum = sum + 500; }else if(ch == 'M'){ sum = sum + 1000; } } return sum; } } . ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/problem-3-Roman-to-Integer/#3--roman-to-integer",
    "relUrl": "/docs/data-structure/ds-easy-set-1/problem-3-Roman-to-Integer/#3--roman-to-integer"
  },"113": {
    "doc": "Roman to Integer",
    "title": "Roman to Integer",
    "content": " ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/problem-3-Roman-to-Integer/",
    "relUrl": "/docs/data-structure/ds-easy-set-1/problem-3-Roman-to-Integer/"
  },"114": {
    "doc": "Linked List Cycle",
    "title": "Linked List Cycle",
    "content": "Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the linked list. Otherwise, return false. Example 1: . Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). Constraints: . | The number of the nodes in the list is in the range [0, 104]. | -105 &lt;= Node.val &lt;= 105 | pos is -1 or a valid index in the linked-list. | . Solution: . Using extra memory . /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head == null) return false; Set&lt;ListNode&gt; set = new HashSet&lt;ListNode&gt;(); while(head != null){ if(set.contains(head)) { return true; } set.add(head); head = head.next; } return false; } } . Using constant memory . public class Solution { public boolean hasCycle(ListNode head) { ListNode fast = head; ListNode last = head; while(fast != null &amp;&amp; fast.next != null){ fast = fast.next.next; last = last.next; if(fast == last){ return true; } } return false; } } . ",
    "url": "http://localhost:4000/problem-30-Linked-List-Cycle/",
    "relUrl": "/problem-30-Linked-List-Cycle/"
  },"115": {
    "doc": "Binary Tree Preorder Traversal",
    "title": "Binary Tree Preorder Traversal",
    "content": "Given the root of a binary tree, return the preorder traversal of its nodes’ values. Example 1: . Input: root = [1,null,2,3] Output: [1,2,3] . Example 2: . Input: root = [] Output: [] . Example 3: . Input: root = [1] Output: [1] . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List&lt;Integer&gt; preorderTraversal(TreeNode root) { List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); return preorderTraversal(root, list); } public List&lt;Integer&gt; preorderTraversal(TreeNode head, List&lt;Integer&gt; list){ if(head == null) return list; list.add(head.val); preorderTraversal(head.left,list); preorderTraversal(head.right,list); return list; } } . ",
    "url": "http://localhost:4000/problem-31-Binary-Tree-Preorder-Traversal/",
    "relUrl": "/problem-31-Binary-Tree-Preorder-Traversal/"
  },"116": {
    "doc": "Binary Tree Preorder Traversal",
    "title": "Binary Tree Postorder Traversal",
    "content": "Example 1: . Input: root = [1,null,2,3] Output: [3,2,1] . Example 2: . Input: root = [] Output: [] . Solution . class Solution { public List&lt;Integer&gt; postorderTraversal(TreeNode root) { List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); return postorderTraversal(root, list); } public List&lt;Integer&gt; postorderTraversal(TreeNode head, List&lt;Integer&gt; list){ if(head == null) return list; postorderTraversal(head.left,list); postorderTraversal(head.right,list); list.add(head.val); return list; } } . ",
    "url": "http://localhost:4000/problem-31-Binary-Tree-Preorder-Traversal/#binary-tree-postorder-traversal",
    "relUrl": "/problem-31-Binary-Tree-Preorder-Traversal/#binary-tree-postorder-traversal"
  },"117": {
    "doc": "Min Stack",
    "title": "Min Stack",
    "content": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the MinStack class: . | MinStack() initializes the stack object. | void push(int val) pushes the element val onto the stack. | void pop() removes the element on the top of the stack. | int top() gets the top element of the stack. | int getMin() retrieves the minimum element in the stack. | . Example 1: . Input [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] Output [null,null,null,null,-3,null,0,-2] Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top(); // return 0 minStack.getMin(); // return -2 . Constraints: . | -231 &lt;= val &lt;= 231 - 1 | Methods pop, top and getMin operations will always be called on non-empty stacks. | At most 3 * 104 calls will be made to push, pop, top, and getMin. | . Solution . class MinStack { public class Node { int val; Node above; Node below; Node() { val = 0; above = null; below = null; } } Node top; public MinStack() { top = new Node(); } public void push(int val) { Node newNode = new Node(); newNode.val = val; top.above = newNode; newNode.below = top; top = newNode; } // old top node gets lost to the abyss of rubbish data public void pop() { top = top.below; top.above = null; } public int top() { return top.val; } public int getMin() { int min = 2147483647; // max int Node traverse = top; while (traverse.below != null) { if (traverse.val &lt; min) min = traverse.val; traverse = traverse.below; } return min; } } /** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(val); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */ . ",
    "url": "http://localhost:4000/problem-31-Min-Stack/",
    "relUrl": "/problem-31-Min-Stack/"
  },"118": {
    "doc": "Intersection of Two Linked Lists",
    "title": "Intersection of Two Linked Lists",
    "content": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null. For example, the following two linked lists begin to intersect at node c1: . The test cases are generated such that there are no cycles anywhere in the entire linked structure. Note that the linked lists must retain their original structure after the function returns. Custom Judge: . The inputs to the judge are given as follows (your program is not given these inputs): . intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node. | listA - The first linked list. | listB - The second linked list. | skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node. | skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node. | . The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted. Example 1: . Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3 Output: Intersected at '8' Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B. Solution . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { ListNode ptrA = headA, ptrB = headB; while (ptrA != ptrB) { // loop until we found the first common node ptrA = ptrA == null ? headB : ptrA.next; // once we're done with A, move to B ptrB = ptrB == null ? headA : ptrB.next; // once we're done with B, move to A } return ptrA; } } . ",
    "url": "http://localhost:4000/problem-33-Intersection-of-Two-Linked-Lists/",
    "relUrl": "/problem-33-Intersection-of-Two-Linked-Lists/"
  },"119": {
    "doc": "Excel Sheet Column Title",
    "title": "Excel Sheet Column Title",
    "content": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet. For example: . A -&gt; 1 B -&gt; 2 C -&gt; 3 ... Z -&gt; 26 AA -&gt; 27 AB -&gt; 28 ... Example 1: . Input: columnNumber = 1 Output: \"A\" . Example 2: . Input: columnNumber = 28 Output: \"AB\" . Example 3: . Input: columnNumber = 701 Output: \"ZY\" . Constraints: . | 1 &lt;= columnNumber &lt;= 231 - 1 | . Solution . class Solution { public String convertToTitle(int columnNumber) { StringBuilder sb = new StringBuilder(); int digit; while(columnNumber&gt;0){ digit = (columnNumber-1)%26; sb.append((char)((int)'A' + digit)); columnNumber = (columnNumber-1)/26; } return sb.reverse().toString(); } } . ",
    "url": "http://localhost:4000/problem-34-Excel-Sheet-Column-Title/",
    "relUrl": "/problem-34-Excel-Sheet-Column-Title/"
  },"120": {
    "doc": "Majority Element",
    "title": "Majority Element",
    "content": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array. Example 1: . Input: nums = [3,2,3] Output: 3 . Example 2: . Input: nums = [2,2,1,1,1,2,2] Output: 2 . Constraints: . | n == nums.length | 1 &lt;= n &lt;= 5 * 104 | -109 &lt;= nums[i] &lt;= 109 | . Solution . Sorting Approach: NlogN complexity. Space: O(1) . class Solution { public int majorityElement(int[] nums) { Arrays.sort(nums); return nums[nums.length/2]; } } . HashMap Approach: Time Complexity O(n), Space Complexity: O(n) . class Solution { public int majorityElement(int[] nums) { Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for(int i=0; i&lt;nums.length; i++){ if(map.containsKey(nums[i])){ map.put(nums[i],map.get(nums[i])+1); }else{ map.put(nums[i],1); } } int count = 0; int key = 0; for(Map.Entry&lt;Integer,Integer&gt; keyValue : map.entrySet()){ if(keyValue.getValue()&gt;count){ count = keyValue.getValue(); key = keyValue.getKey(); } } return key; } } . Moor’s Algorithm: Time Complexity: O(n), Space Complexity: O(1) . class Solution { public int majorityElement(int[] nums) { if(nums.length == 1) return nums[0]; int majorElementIndex = 0; int majorElementCount = 1; for(int i=1; i&lt;nums.length; i++){ if(nums[majorElementIndex] == nums[i]){ majorElementCount ++; }else{ majorElementCount --; } if(majorElementCount == 0){ majorElementCount = 1; majorElementIndex = i; } } return nums[majorElementIndex]; } } . ",
    "url": "http://localhost:4000/problem-35-Majority-Element/",
    "relUrl": "/problem-35-Majority-Element/"
  },"121": {
    "doc": "Excel Sheet Column Number",
    "title": "Excel Sheet Column Number",
    "content": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number. For example: . A -&gt; 1 B -&gt; 2 C -&gt; 3 ... Z -&gt; 26 AA -&gt; 27 AB -&gt; 28 ... Example 1: . Input: columnTitle = \"A\" Output: 1 . Example 2: . Input: columnTitle = \"AB\" Output: 28 . Example 3: . Input: columnTitle = \"ZY\" Output: 701 . Constraints: . | 1 &lt;= columnTitle.length &lt;= 7 | columnTitle consists only of uppercase English letters. | columnTitle is in the range [“A”, “FXSHRXW”]. | . Solution . class Solution { public int titleToNumber(String columnTitle) { int ans = 0; for(int i=0; i&lt;=columnTitle.length() -1; i++){ ans = 26*ans + columnTitle.charAt(i) - 'A' +1; } return ans; } } . ",
    "url": "http://localhost:4000/problem-36-Excel-Sheet-Column-Number/",
    "relUrl": "/problem-36-Excel-Sheet-Column-Number/"
  },"122": {
    "doc": "Reverse Bits",
    "title": "Reverse Bits",
    "content": "Reverse bits of a given 32 bits unsigned integer. Note: . | Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned. | In Java, the compiler represents the signed integers using 2’s complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825. | . Example 1: . Input: n = 00000010100101000001111010011100 Output: 964176192 (00111001011110000010100101000000) Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. Example 2: . Input: n = 11111111111111111111111111111101 Output: 3221225471 (10111111111111111111111111111111) Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. Constraints: . | The input must be a binary string of length 32 | . Solution . public class Solution { // you need treat n as an unsigned value public int reverseBits(int n) { return Integer.reverse(n); } } . ",
    "url": "http://localhost:4000/problem-37-Reverse-Bits/",
    "relUrl": "/problem-37-Reverse-Bits/"
  },"123": {
    "doc": "Number of 1 Bits",
    "title": "Number of 1 Bits",
    "content": "Write a function that takes an unsigned integer and returns the number of ‘1’ bits it has (also known as the Hamming weight). Note: . | Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned. | In Java, the compiler represents the signed integers using 2’s complement notation. Therefore, in Example 3, the input represents the signed integer. -3. | . Example 1: . Input: n = 00000000000000000000000000001011 Output: 3 Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits. Example 2: . Input: n = 00000000000000000000000010000000 Output: 1 Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit. Example 3: . Input: n = 11111111111111111111111111111101 Output: 31 Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits. Constraints: . | The input must be a binary string of length 32. | . Solution . public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { String str = Integer.toBinaryString(n); int c = 0; for(int i=0; i&lt;str.length(); i++){ if(str.charAt(i) == '1') c++; } return c; } } . Other . public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { int sum = 0; while(n != 0) { sum++; n &amp;= (n-1); } return sum; } } . ",
    "url": "http://localhost:4000/problem-38-Number-of-1-Bits/",
    "relUrl": "/problem-38-Number-of-1-Bits/"
  },"124": {
    "doc": "Happy Number",
    "title": "Happy Number",
    "content": "Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: . | Starting with any positive integer, replace the number by the sum of the squares of its digits. | Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. | Those numbers for which this process ends in 1 are happy. | Return true if n is a happy number, and false if not. | . Example 1: . Input: n = 19 Output: true Explanation: 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 . Example 2: . Input: n = 2 Output: false . Constraints: . | 1 &lt;= n &lt;= 231 - 1 Solution . class Solution { public boolean isHappy(int n) { while(n != 1 &amp;&amp; n != 4){ n = getNext(n); } return n==1; } public int getNext(int n){ int sum = 0; int d; while(n&gt;0){ d = n%10; sum += d*d; n = n/10; } return sum; } } . Approach : Detect Cycles with a HashSet . More details: https://leetcode.com/problems/happy-number/solution/ . class Solution { public boolean isHappy(int n) { Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;(); int sum = 0; int d; while(n != 1){ n = getDigitsSum(n); if(set.contains(n)) return false; set.add(n); } return true; } public int getDigitsSum(int n){ int sum = 0; int d; while(n&gt;0){ d = n%10; sum += d*d; n = n/10; } return sum; } } . | . ",
    "url": "http://localhost:4000/problem-39-Number-of-1-Bits/",
    "relUrl": "/problem-39-Number-of-1-Bits/"
  },"125": {
    "doc": "Longest Common Prefix",
    "title": "Longest Common Prefix",
    "content": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string “”. Example 1: . Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" . Example 2: . Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Explanation: There is no common prefix among the input strings. Constraints: . | 1 &lt;= strs.length &lt;= 200 | 0 &lt;= strs[i].length &lt;= 200 | strs[i] consists of only lowercase English letters. | . Solution: . class Solution { public String longestCommonPrefix(String[] strs) { if(strs == null || strs.length ==0) return \"\"; String str= strs[0]; int i; for(i=0; i&lt;str.length(); i++){ for(int j=0;j&lt;strs.length; j++){ if(strs[j].length()&lt;=i) return str.substring(0,i); if(strs[j].charAt(i) != str.charAt(i)) return str.substring(0,i); } } if(i==0) return \"\"; return strs[0]; } } . Complexity Analysis . Time complexity : O(S) , where S is the sum of all characters in all strings. In the worst case there will be nn equal strings with length m and the algorithm performs S = m \\cdot nS=m⋅n character comparisons. Even though the worst case is still the same as Approach 1, in the best case there are at most n \\cdot minLenn⋅minLen comparisons where minLenminLen is the length of the shortest string in the array. Space complexity : O(1). We only used constant extra space. Solution: Divide and Conquer . class Solution { public String longestCommonPrefix(String[] strs) { if(strs == null || strs.length ==0) return \"\"; return longestCommonPrefix(strs,0, strs.length-1); } private String longestCommonPrefix(String[] strs, int l, int u){ if(l == u ) return strs[l]; int mid = (l+u)/2; String left = longestCommonPrefix(strs, l, mid); String right = longestCommonPrefix(strs, mid+1, u); return commonPrefix(left, right); } private String commonPrefix(String left, String right){ int min = Math.min(left.length(), right.length()); for(int i=0; i&lt;min; i++){ if(left.charAt(i) != right.charAt(i)) return left.substring(0, i); } return left.substring(0,min); } } . Complexity Analysis . In the worst case we have nn equal strings with length m . | Time complexity : O(S), where S is the number of all characters in the array, S = m \\cdot nS=m⋅n Time complexity is 2 \\cdot T\\left ( \\frac{n}{2} \\right ) + O(m)2⋅T(2 n )+O(m). Therefore time complexity is O(S)O(S). In the best case this algorithm performs O(minLen \\cdot n)O(minLen⋅n) comparisons, where minLenminLen is the shortest string of the array . | Space complexity : O(m \\cdot \\log n)O(m⋅logn) . | . There is a memory overhead since we store recursive calls in the execution stack. There are \\log nlogn recursive calls, each store need mm space to store the result, so space complexity is O(m \\cdot \\log n)O(m⋅logn) . ",
    "url": "http://localhost:4000/docs/data-structure/ds-easy-set-1/problem-4-Longest-Common-Prefix/",
    "relUrl": "/docs/data-structure/ds-easy-set-1/problem-4-Longest-Common-Prefix/"
  },"126": {
    "doc": "Remove Linked List Elements",
    "title": "Remove Linked List Elements",
    "content": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head. Example 1: . Input: head = [1,2,6,3,4,5,6], val = 6 Output: [1,2,3,4,5] . Example 2: . Input: head = [], val = 1 Output: [] . Example 3: . Input: head = [7,7,7,7], val = 7 Output: [] . Constraints: . | The number of nodes in the list is in the range [0, 104]. | 1 &lt;= Node.val &lt;= 50 | 0 &lt;= val &lt;= 50 | . Solution . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { ListNode ptr, qtr; while(head != null &amp;&amp; head.val == val){ ptr = head; head = head.next; ptr.next = null; } if(head == null) return head; ptr = head; while(ptr.next != null){ if(ptr.next.val == val){ qtr = ptr.next; ptr.next = ptr.next.next; qtr.next = null; }else ptr = ptr.next; } return head; } } . ",
    "url": "http://localhost:4000/problem-40-Remove-Linked-List-Elements/",
    "relUrl": "/problem-40-Remove-Linked-List-Elements/"
  },"127": {
    "doc": "Reverse Linked List",
    "title": "Reverse Linked List",
    "content": "Given the head of a singly linked list, reverse the list, and return the reversed list. Example 1: . Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] . Solution . Non-recursive . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseList(ListNode head) { if(head == null) return head; ListNode ptr = null, qtr ; while(head != null){ qtr = head; head = head.next; qtr.next = ptr; ptr = qtr; } return ptr; } } . Recursive . class Solution { public ListNode reverseList(ListNode head) { if(head == null) return head; if(head.next == null) return head; ListNode newNode = reverseList(head.next); head.next.next = head; head.next = null; return newNode; } } . ",
    "url": "http://localhost:4000/problem-41-Reverse-Linked-List/",
    "relUrl": "/problem-41-Reverse-Linked-List/"
  },"128": {
    "doc": "Isomorphic Strings",
    "title": "Isomorphic Strings",
    "content": "Given two strings s and t, determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. Example 1: . Input: s = \"egg\", t = \"add\" Output: true . Example 2: . Input: s = \"foo\", t = \"bar\" Output: false . Example 3: . Input: s = \"paper\", t = \"title\" Output: true . Constraints: . | 1 &lt;= s.length &lt;= 5 * 104 | t.length == s.length | s and t consist of any valid ascii character. | . Solution . https://leetcode.com/problems/isomorphic-strings/solution/ . ",
    "url": "http://localhost:4000/problem-42-Isomorphic-Strings/",
    "relUrl": "/problem-42-Isomorphic-Strings/"
  },"129": {
    "doc": "Contains Duplicate",
    "title": "Contains Duplicate",
    "content": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. Example 1: . Input: nums = [1,2,3,1] Output: true . Example 2: . Input: nums = [1,2,3,4] Output: false . Example 3: . Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true . Constraints: . | 1 &lt;= nums.length &lt;= 105 | -109 &lt;= nums[i] &lt;= 109 | . Solution . class Solution { public boolean containsDuplicate(int[] nums) { Set&lt;Integer&gt; set = new HashSet(); for(int i : nums){ if(set.contains(i)) return true; set.add(i); } return false; } } . ",
    "url": "http://localhost:4000/problem-43-Contains-Duplicate/",
    "relUrl": "/problem-43-Contains-Duplicate/"
  },"130": {
    "doc": "Contains Duplicate II",
    "title": "Contains Duplicate II",
    "content": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) &lt;= k. Example 1: . Input: nums = [1,2,3,1], k = 3 Output: true . Example 2: . Input: nums = [1,0,1,1], k = 1 Output: true . Example 3: . Input: nums = [1,2,3,1,2,3], k = 2 Output: false . Constraints: . | 1 &lt;= nums.length &lt;= 105 | -109 &lt;= nums[i] &lt;= 109 | 0 &lt;= k &lt;= 105 | . Solution . class Solution { public boolean containsNearbyDuplicate(int[] nums, int k) { Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for(int i = 0; i&lt;nums.length; i++){ if(map.containsKey(nums[i])){ if(Math.abs(map.get(nums[i]) - i) &lt;= k) return true; } map.put(nums[i],i); } return false; } } . ",
    "url": "http://localhost:4000/problem-44-Contains-Duplicate-II/",
    "relUrl": "/problem-44-Contains-Duplicate-II/"
  },"131": {
    "doc": "Implement Stack using Queues",
    "title": "Implement Stack using Queues",
    "content": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty). Implement the MyStack class: . | void push(int x) Pushes element x to the top of the stack. | int pop() Removes the element on the top of the stack and returns it. | int top() Returns the element on the top of the stack. | boolean empty() Returns true if the stack is empty, false otherwise. | . Notes: . You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid. Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue’s standard operations. Example 1: . Input [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"] [[], [1], [2], [], [], []] Output [null, null, null, 2, 2, false] . Explanation . MyStack myStack = new MyStack(); myStack.push(1); myStack.push(2); myStack.top(); // return 2 myStack.pop(); // return 2 myStack.empty(); // return False . Constraints: . | 1 &lt;= x &lt;= 9 | At most 100 calls will be made to push, pop, top, and empty. | All the calls to pop and top are valid. | . Follow-up: Can you implement the stack using only one queue? . Solution . ",
    "url": "http://localhost:4000/problem-45-Implement-Stack-using-Queues/",
    "relUrl": "/problem-45-Implement-Stack-using-Queues/"
  },"132": {
    "doc": "Invert Binary Tree",
    "title": "Invert Binary Tree",
    "content": "Given the root of a binary tree, invert the tree, and return its root. Example 1: . Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1] . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode invertTree(TreeNode root) { if(root == null) return root; TreeNode ptr; ptr = root.left; root.left = root.right; root.right = ptr; invertTree(root.left); invertTree(root.right); return root; } } . ",
    "url": "http://localhost:4000/problem-46-Invert-Binary-Tree/",
    "relUrl": "/problem-46-Invert-Binary-Tree/"
  },"133": {
    "doc": "Power of Two",
    "title": "Power of Two",
    "content": "Given an integer n, return true if it is a power of two. Otherwise, return false. An integer n is a power of two, if there exists an integer x such that n == 2x. Example 1: . Input: n = 1 Output: true Explanation: 20 = 1 . Example 2: . Input: n = 16 Output: true Explanation: 24 = 16 . Example 3: . Input: n = 3 Output: false . Constraints: . | -231 &lt;= n &lt;= 231 - 1 | . Solution . class Solution { public boolean isPowerOfTwo(int n) { if(n == 1) return true; if(n == 0) return false; while(n&gt;=0){ if(n == 0) return true; if(n == 2) return true; if(n % 2 == 1) return false; n = n/2; } return false; } } . ",
    "url": "http://localhost:4000/problem-47-Power-of-Two/",
    "relUrl": "/problem-47-Power-of-Two/"
  },"134": {
    "doc": "Palindrome Linked List",
    "title": "Palindrome Linked List",
    "content": "Given the head of a singly linked list, return true if it is a palindrome. Example 1: . Input: head = [1,2,2,1] Output: true . Example 2: . Input: head = [1,2] Output: false . Constraints: . | The number of nodes in the list is in the range [1, 105]. | 0 &lt;= Node.val &lt;= 9 | . Solution . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public boolean isPalindrome(ListNode head) { ListNode slow, fast; slow = fast = head; while(fast != null &amp;&amp; fast.next != null){ slow = slow.next; fast = fast.next.next; } if(fast != null) slow = slow.next; slow = reverseList(slow); return compareList(head, slow); } public ListNode reverseList(ListNode head){ ListNode ptr = null, qtr; while(head != null){ qtr = ptr; ptr = head; head = head.next; ptr.next = qtr; } return ptr; } public boolean compareList(ListNode l1, ListNode l2){ while(l1 != null &amp;&amp; l2 != null){ if(l1.val != l2.val) return false; l1 = l1.next; l2 = l2.next; } // if(l1 != null || l2 != null) return false; return true; } } . ",
    "url": "http://localhost:4000/problem-48-Palindrome-Linked-List/",
    "relUrl": "/problem-48-Palindrome-Linked-List/"
  },"135": {
    "doc": "Lowest Common Ancestor of a Binary Search Tree",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "content": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” . Example 1: . Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6. Example 2: . Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. Example 3: . Input: root = [2,1], p = 2, q = 1 Output: 2 . Constraints: . | The number of nodes in the tree is in the range [2, 105]. | -109 &lt;= Node.val &lt;= 109 | All Node.val are unique. | p != q | p and q will exist in the BST. | . Solution: . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if ( p.val &lt; root.val &amp;&amp; q.val &lt; root.val ) return this.lowestCommonAncestor(root.left, p, q); if ( p.val &gt; root.val &amp;&amp; q.val &gt; root.val ) return this.lowestCommonAncestor(root.right, p, q); return root; } } . ",
    "url": "http://localhost:4000/problem-49-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/",
    "relUrl": "/problem-49-Lowest-Common-Ancestor-of-a-Binary-Search-Tree/"
  },"136": {
    "doc": "Valid Parentheses",
    "title": "Valid Parentheses",
    "content": "Given a string s containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[’ and ‘]’, determine if the input string is valid. An input string is valid if: . | Open brackets must be closed by the same type of brackets. | Open brackets must be closed in the correct order. | . Example 1: . Input: s = \"()\" Output: true . Example 2: . Input: s = \"()[]{}\" Output: true . Example 3: . Input: s = \"(]\" Output: false . Constraints: . | 1 &lt;= s.length &lt;= 104 | s consists of parentheses only ‘()[]{}’. | . class Solution { public boolean isValid(String s) { Stack&lt;Character&gt; stack = new Stack(); for(int i = 0; i&lt;s.length(); i++){ if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '['){ stack.push(s.charAt(i)); }else{ if(stack.isEmpty()) return false; if(s.charAt(i) != getCorrospondingBracket(stack.pop())) return false; } } if(stack.isEmpty()) return true; return false; } private char getCorrospondingBracket(char c){ switch(c){ case '(': return ')'; case '{': return '}'; case '[': return ']'; default : return '*'; } } } . ",
    "url": "http://localhost:4000/problem-5-valid-parentheses/",
    "relUrl": "/problem-5-valid-parentheses/"
  },"137": {
    "doc": "Delete Node in a Linked List",
    "title": "Delete Node in a Linked List",
    "content": "Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly. It is guaranteed that the node to be deleted is not a tail node in the list. Example 1: . Input: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function. Constraints: . | The number of the nodes in the given list is in the range [2, 1000]. | -1000 &lt;= Node.val &lt;= 1000 | The value of each node in the list is unique. | The node to be deleted is in the list and is not a tail node | . Solution . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public void deleteNode(ListNode node) { //We are not going to delete the given node //We will delete the node next to it //Because for deleting the given node we need its previous node //And will copy its value to the given node //Storing the vaue of the next node to the given node int nextNodeVal = node.next.val; //Then removing that next node node.next = node.next.next; //And simply copy the value node.val = nextNodeVal; } } . ",
    "url": "http://localhost:4000/problem-50-Delete-Node-in-a-Linked-List/",
    "relUrl": "/problem-50-Delete-Node-in-a-Linked-List/"
  },"138": {
    "doc": "Valid Anagram",
    "title": "Valid Anagram",
    "content": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example 1: . Input: s = \"anagram\", t = \"nagaram\" Output: true . Example 2: . Input: s = \"rat\", t = \"car\" Output: false . Constraints: . | 1 &lt;= s.length, t.length &lt;= 5 * 104 | s and t consist of lowercase English letters. | . Solution . class Solution { public boolean isAnagram(String s, String t) { if(s.length() != t.length()) return false; Map&lt;Character, Integer&gt; map1 = new HashMap&lt;Character, Integer&gt;(); Map&lt;Character, Integer&gt; map2 = new HashMap&lt;Character, Integer&gt;(); for(int i=0; i&lt;s.length(); i++){ if(map1.containsKey(s.charAt(i))){ map1.put(s.charAt(i), map1.get(s.charAt(i))+1); }else{ map1.put(s.charAt(i), 1); } if(map2.containsKey(t.charAt(i))){ map2.put(t.charAt(i), map2.get(t.charAt(i))+1); }else{ map2.put(t.charAt(i), 1); } } for(Character ch : map1.keySet()){ if(!map2.containsKey(ch)) return false; if((int)map1.get(ch) != (int)map2.get(ch)) return false; } return true; } } . try using simple map or only using array . class Solution { public boolean isAnagram(String s, String t) { int[] arr = new int[26]; if(s.length() != t.length()) return false; for(char a: s.toCharArray()) arr[a - 'a']++; for(char b : t.toCharArray()) arr[b - 'a']--; for(int i : arr){ if(i &gt; 0) return false; } return true; } } . ",
    "url": "http://localhost:4000/problem-51-Valid-Anagram/",
    "relUrl": "/problem-51-Valid-Anagram/"
  },"139": {
    "doc": "Binary Tree Paths",
    "title": "Binary Tree Paths",
    "content": "Given the root of a binary tree, return all root-to-leaf paths in any order. A leaf is a node with no children. Example 1: . Input: root = [1,2,3,null,5] Output: [\"1-&gt;2-&gt;5\",\"1-&gt;3\"] . Constraints: . | The number of nodes in the tree is in the range [1, 100]. | -100 &lt;= Node.val &lt;= 100 | . Solution . Non-recursive . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class NodeMap{ public TreeNode head; public StringBuilder sb; NodeMap(TreeNode head, String val){ sb = new StringBuilder(val); this.head = head; } } class Solution { public List&lt;String&gt; binaryTreePaths(TreeNode root) { List&lt;String&gt; list = new ArrayList&lt;String&gt;(); Stack&lt;NodeMap&gt; stack = new Stack&lt;NodeMap&gt;(); stack.push(new NodeMap(root, String.valueOf(root.val))); NodeMap nodeMap; while(!stack.isEmpty()){ nodeMap = stack.pop(); if(nodeMap.head.left == null &amp;&amp; nodeMap.head.right == null){ list.add(nodeMap.sb.toString().substring(0,nodeMap.sb.length())); } if(nodeMap.head.right != null){ stack.push(new NodeMap(nodeMap.head.right, nodeMap.sb.toString()+\"-&gt;\"+String.valueOf(nodeMap.head.right.val))); } if(nodeMap.head.left != null){ stack.push(new NodeMap(nodeMap.head.left, nodeMap.sb.toString()+\"-&gt;\"+String.valueOf(nodeMap.head.left.val))); } } return list; } } . Recursive . class Solution { List&lt;String&gt; res = new ArrayList&lt;&gt;(); public List&lt;String&gt; binaryTreePaths(TreeNode root) { helper(root, new StringBuilder()); return res; } public void helper(TreeNode node, StringBuilder sb) { if (node == null) return; int len = sb.length(); sb.append(node.val); if (node.left == null &amp;&amp; node.right == null) { res.add(sb.toString()); } else { sb.append(\"-&gt;\"); helper(node.left, sb); helper(node.right, sb); } // deleting the extra characters we added sb.setLength(len); } } . ",
    "url": "http://localhost:4000/problem-52-Binary-Tree-Paths/",
    "relUrl": "/problem-52-Binary-Tree-Paths/"
  },"140": {
    "doc": "Add Digits",
    "title": "Add Digits",
    "content": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it. Example 1: . Input: num = 38 Output: 2 Explanation: The process is 38 --&gt; 3 + 8 --&gt; 11 11 --&gt; 1 + 1 --&gt; 2 Since 2 has only one digit, return it. Example 2: . Input: num = 0 Output: 0 . Constraints: . | 0 &lt;= num &lt;= 231 - 1 | . Solution . class Solution { public int addDigits(int num) { if (num == 0) return 0; if (num % 9 == 0) return 9; return num % 9; } } . class Solution { public int addDigits(int num) { if(num&lt;10) return num; while(num&gt;9){ num = getNext(num); } return num; } public int getNext(int n){ int sum = 0; while(n&gt;0){ sum = sum + n%10; n = n/10; } return sum; } } . ",
    "url": "http://localhost:4000/problem-53-Add-Digits/",
    "relUrl": "/problem-53-Add-Digits/"
  },"141": {
    "doc": "Ugly Number",
    "title": "Ugly Number",
    "content": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return true if n is an ugly number. Example 1: . Input: n = 6 Output: true Explanation: 6 = 2 × 3 . Example 2: . Input: n = 1 Output: true Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5. Example 3: . Input: n = 14 Output: false Explanation: 14 is not ugly since it includes the prime factor 7. Constraints: . | -231 &lt;= n &lt;= 231 - 1 | . Solution . class Solution { public boolean isUgly(int n) { if (n==0) return false; while (n!=1) { if (n%2==0) n=n/2; else if (n%3==0) n=n/3; else if (n%5==0) n=n/5; else return false; } return true; } } . ",
    "url": "http://localhost:4000/problem-54-Ugly-Number/",
    "relUrl": "/problem-54-Ugly-Number/"
  },"142": {
    "doc": "Missing Number",
    "title": "Missing Number",
    "content": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array. Example 1: . Input: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. Example 2: . Input: nums = [0,1] Output: 2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. Example 3: . Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. Constraints: . | n == nums.length | 1 &lt;= n &lt;= 104 | 0 &lt;= nums[i] &lt;= n | All the numbers of nums are unique. | . Solution . ",
    "url": "http://localhost:4000/problem-55-Missing-Number/",
    "relUrl": "/problem-55-Missing-Number/"
  },"143": {
    "doc": "Missing Number",
    "title": "Missing Number",
    "content": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array. Example 1: . Input: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. Example 2: . Input: nums = [0,1] Output: 2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. Example 3: . Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. Constraints: . | n == nums.length | 1 &lt;= n &lt;= 104 | 0 &lt;= nums[i] &lt;= n | All the numbers of nums are unique. | . Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity? . Solution . class Solution { public int missingNumber(int[] nums) { int len=nums.length; int sum = len*(len+1)/2; for(int items:nums){ sum-=items; } return sum; } } . ",
    "url": "http://localhost:4000/problem-56-Missing-Number/",
    "relUrl": "/problem-56-Missing-Number/"
  },"144": {
    "doc": "Move Zeroes",
    "title": "Move Zeroes",
    "content": "Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array. Example 1: . Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] . Example 2: . Input: nums = [0] Output: [0] . Constraints: . | 1 &lt;= nums.length &lt;= 104 | -231 &lt;= nums[i] &lt;= 231 - 1 | . Solution . Faster . class Solution { public void moveZeroes(int[] nums) { int cnt = 0; for (int i = 0; i &lt; nums.length; i++) { if (nums[i] != 0) { if (i &gt; cnt) { nums[cnt] = nums[i]; } cnt++; } } while (cnt &lt; nums.length) { nums[cnt++] = 0; } } } . class Solution { public void moveZeroes(int[] nums) { int i = 0; int j = 0; int temp; while(i&lt;nums.length &amp;&amp; j&lt;nums.length){ while(i&lt;nums.length &amp;&amp; nums[i] != 0) i++; j = i; while(j&lt;nums.length &amp;&amp; nums[j] == 0) j++; if(i&lt;nums.length &amp;&amp; j&lt;nums.length){ nums[i] = nums[j]; nums[j] = 0; } i++; } } } . without maintaining order . class Solution { public void moveZeroes(int[] nums) { int i = 0; int j = nums.length - 1; int temp; while(i&lt;j){ while(i&lt;=j &amp;&amp; nums[i] != 0) i++; while(j&gt;=0 &amp;&amp; nums[j] == 0) j--; if(i&lt;nums.length-1 &amp;&amp; j&gt;=0){ temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; i++; j--; } } } } . ",
    "url": "http://localhost:4000/problem-57-Move-Zeroes/",
    "relUrl": "/problem-57-Move-Zeroes/"
  },"145": {
    "doc": "Nim Game",
    "title": "Nim Game",
    "content": "You are playing the following Nim Game with your friend: . | Initially, there is a heap of stones on the table. | You and your friend will alternate taking turns, and you go first. | On each turn, the person whose turn it is will remove 1 to 3 stones from the heap. | The one who removes the last stone is the winner. | Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false. | . Example 1: . Input: n = 4 Output: false . Explanation: These are the possible outcomes: . | You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins. | You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins. | You remove 3 stones. Your friend removes the last stone. Your friend wins. In all outcomes, your friend wins. Example 2: . Input: n = 1 Output: true . Example 3: . Input: n = 2 Output: true . Constraints: . | 1 &lt;= n &lt;= 231 - 1 | . | . Solution . class Solution { public boolean canWinNim(int n) { return n%4 != 0; } } . ",
    "url": "http://localhost:4000/problem-58-Nim-Game/",
    "relUrl": "/problem-58-Nim-Game/"
  },"146": {
    "doc": "Power of Three",
    "title": "Power of Three",
    "content": "Given an integer n, return true if it is a power of three. Otherwise, return false. An integer n is a power of three, if there exists an integer x such that n == 3x. Example 1: . Input: n = 27 Output: true . Example 2: . Input: n = 0 Output: false . Example 3: . Input: n = 9 Output: true . Constraints: . | -231 &lt;= n &lt;= 231 - 1 | . Solution . public class Solution { public boolean isPowerOfThree(int n) { if (n &lt; 1) { return false; } while (n % 3 == 0) { n /= 3; } return n == 1; } } . ",
    "url": "http://localhost:4000/problem-59-Power-of-Three/",
    "relUrl": "/problem-59-Power-of-Three/"
  },"147": {
    "doc": "Merge Two Sorted Lists",
    "title": "Merge Two Sorted Lists",
    "content": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list. Example 1: . Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] . Example 2: . Input: list1 = [], list2 = [] Output: [] . Example 3: . Input: list1 = [], list2 = [0] Output: [0] . Constraints: . | The number of nodes in both lists is in the range [0, 50]. | -100 &lt;= Node.val &lt;= 100 | Both list1 and list2 are sorted in non-decreasing order. | . Solution . /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode mergeTwoLists(ListNode list1, ListNode list2) { if(list1 == null ) return list2; if(list2 == null ) return list1; ListNode res, ptr; // create first node if(list1.val &lt; list2.val){ res = list1; list1 = list1.next; }else{ res = list2; list2 = list2.next; } res.next = null; ptr = res; // process both lists while(list1 != null &amp;&amp; list2 != null){ if(list1.val &lt; list2.val){ ptr.next = list1; list1 = list1.next; }else{ ptr.next = list2; list2 = list2.next; } ptr = ptr.next; } // handle remaining elements if(list1 != null){ ptr.next = list1; } if(list2 != null){ ptr.next = list2; } return res; } } . ",
    "url": "http://localhost:4000/problem-6-merge-two-sorted-lists/",
    "relUrl": "/problem-6-merge-two-sorted-lists/"
  },"148": {
    "doc": "Counting Bits",
    "title": "Counting Bits",
    "content": "Given an integer n, return an array ans of length n + 1 such that for each i (0 &lt;= i &lt;= n), ans[i] is the number of 1’s in the binary representation of i. Example 1: . Input: n = 2 Output: [0,1,1] Explanation: 0 --&gt; 0 1 --&gt; 1 2 --&gt; 10 . Example 2: . Input: n = 5 Output: [0,1,1,2,1,2] Explanation: 0 --&gt; 0 1 --&gt; 1 2 --&gt; 10 3 --&gt; 11 4 --&gt; 100 5 --&gt; 101 . Constraints: . | 0 &lt;= n &lt;= 105 | . Solution . class Solution { public int[] countBits(int n) { int[] ans = new int[n+1]; ans[0] = 0; for(int i = 1; i &lt;= n;i++){ ans[i] = (i &amp;1) + ans[i/2]; } return ans; } } . class Solution { public int[] countBits(int n) { int[] ans = new int[n+1]; for(int i=0; i&lt;n+1; i++){ ans[i] = count(Integer.toBinaryString(i)); } return ans; } public int count(String s){ int c = 0; for(int i=0; i&lt;s.length(); i++) if(s.charAt(i) == '1') c++; return c; } } . class Solution { public int[] countBits(int n) { int[] ans = new int[n+1]; int[] dp = new int[n+1]; for(int i=0; i&lt;=n; i++) dp[i] = -1; for (int i=0; i&lt;=n; i++) { ans[i] = bits(i, dp); } return ans; } int bits(int n, int[] dp) { if (n == 0) return 0; if (n == 1) return 1; if (dp[n] != -1) return dp[n]; int rem, quo; quo = n / 2; rem = n % 2; return dp[n] = (rem + bits(quo, dp)); } } . ",
    "url": "http://localhost:4000/problem-60-Counting-Bits/",
    "relUrl": "/problem-60-Counting-Bits/"
  },"149": {
    "doc": "Power of Four",
    "title": "Power of Four",
    "content": "Given an integer n, return true if it is a power of four. Otherwise, return false. An integer n is a power of four, if there exists an integer x such that n == 4x. Example 1: . Input: n = 16 Output: true . Example 2: . Input: n = 5 Output: false . Example 3: . Input: n = 1 Output: true . Constraints: . | -231 &lt;= n &lt;= 231 - 1 | . Solution . class Solution { public boolean isPowerOfFour(int n) { if(n == 0) return false; while(n &gt; 1){ if(n%4 != 0) return false; n = n/4; } return n == 1; } } . ",
    "url": "http://localhost:4000/problem-61-a-Power-of-Four/",
    "relUrl": "/problem-61-a-Power-of-Four/"
  },"150": {
    "doc": "Reverse String",
    "title": "Reverse String",
    "content": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory. Example 1: . Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"] Output: [\"o\",\"l\",\"l\",\"e\",\"h\"] . Example 2: . Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] . Constraints: . | 1 &lt;= s.length &lt;= 105 | s[i] is a printable ascii character. | . Solution . class Solution { public void reverseString(char[] s) { int i = 0; int j = s.length - 1; char ch; while(i&lt;=j){ ch = s[i]; s[i] = s[j]; s[j] = ch; i++; j--; } } } . ",
    "url": "http://localhost:4000/problem-61-b-Reverse-String/",
    "relUrl": "/problem-61-b-Reverse-String/"
  },"151": {
    "doc": "Reverse Vowels of a String",
    "title": "Reverse Vowels of a String",
    "content": "Given a string s, reverse only all the vowels in the string and return it. The vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’, and they can appear in both cases. Example 1: . Input: s = \"hello\" Output: \"holle\" . Example 2: . Input: s = \"leetcode\" Output: \"leotcede\" . Constraints: . | 1 &lt;= s.length &lt;= 3 * 105 | s consist of printable ASCII characters. | . Solution . class Solution { public String reverseVowels(String s) { char[] str = new char[s.length()]; str = s.toCharArray(); int i = 0; int j = s.length() - 1; char ch; while(i&lt;j){ while(i&lt;j &amp;&amp; !isVowel(str[i])) i++; while(i&lt;j &amp;&amp; !isVowel(str[j])) j--; if(i&lt;j){ ch = str[i]; str[i] = str[j]; str[j] = ch; i++; j--; } } return String.valueOf(str); } public boolean isVowel(char ch){ if(ch == 'A' || ch =='a' || ch == 'e' || ch == 'E' || ch == 'I' || ch =='i' || ch == 'O' || ch == 'o' || ch == 'u' || ch == 'U') return true; return false; } } . ",
    "url": "http://localhost:4000/problem-64-Reverse-Vowels-of-a-String/",
    "relUrl": "/problem-64-Reverse-Vowels-of-a-String/"
  },"152": {
    "doc": "Intersection of Two Arrays",
    "title": "Intersection of Two Arrays",
    "content": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order. Example 1: . Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] . Example 2: . Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Explanation: [4,9] is also accepted. Constraints: . | 1 &lt;= nums1.length, nums2.length &lt;= 1000 | 0 &lt;= nums1[i], nums2[i] &lt;= 1000 | . Solution . class Solution { public int[] set_intersection(HashSet&lt;Integer&gt; set1, HashSet&lt;Integer&gt; set2) { int [] output = new int[set1.size()]; int idx = 0; for (Integer s : set1) if (set2.contains(s)) output[idx++] = s; return Arrays.copyOf(output, idx); } public int[] intersection(int[] nums1, int[] nums2) { HashSet&lt;Integer&gt; set1 = new HashSet&lt;Integer&gt;(); for (Integer n : nums1) set1.add(n); HashSet&lt;Integer&gt; set2 = new HashSet&lt;Integer&gt;(); for (Integer n : nums2) set2.add(n); if (set1.size() &lt; set2.size()) return set_intersection(set1, set2); else return set_intersection(set2, set1); } } . ",
    "url": "http://localhost:4000/problem-65-Intersection-of-Two-Arrays/",
    "relUrl": "/problem-65-Intersection-of-Two-Arrays/"
  },"153": {
    "doc": "Intersection of Two Arrays II",
    "title": "Intersection of Two Arrays II",
    "content": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order. Example 1: . Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] . Example 2: . Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Explanation: [9,4] is also accepted. Constraints: . | 1 &lt;= nums1.length, nums2.length &lt;= 1000 | 0 &lt;= nums1[i], nums2[i] &lt;= 1000 | . Solution . class Solution { public int[] intersect(int[] nums1, int[] nums2) { Arrays.sort(nums1); Arrays.sort(nums2); int i = 0; int j = 0; int[] ans = new int[Math.min(nums1.length, nums2.length)]; int k = 0; while(i&lt;nums1.length &amp;&amp; j&lt;nums2.length){ if(nums1[i] == nums2[j]){ ans[k] = nums1[i]; k++; i++; j++; }else if(nums1[i]&gt;nums2[j]) j++; else i++; } return Arrays.copyOf(ans,k); } } . ",
    "url": "http://localhost:4000/problem-66-Intersection-of-Two-Arrays-II/",
    "relUrl": "/problem-66-Intersection-of-Two-Arrays-II/"
  },"154": {
    "doc": "Valid Perfect Square",
    "title": "Valid Perfect Square",
    "content": "Given a positive integer num, write a function which returns True if num is a perfect square else False. Follow up: Do not use any built-in library function such as sqrt. Example 1: . Input: num = 16 Output: true . Example 2: . Input: num = 14 Output: false . Constraints: . | 1 &lt;= num &lt;= 2^31 - 1 | . Solution . class Solution { public boolean isPerfectSquare(int num) { int start = 0; int end = num; if(num == 1) return true; while (start &lt;= end){ long mid = start + (end - start)/2; if(mid * mid == num) return true; if(num &gt; mid * mid) start = (int)mid + 1; if(num &lt; mid * mid) end = (int)mid - 1; } return false; } } . ",
    "url": "http://localhost:4000/problem-67-Valid-Perfect-Square/",
    "relUrl": "/problem-67-Valid-Perfect-Square/"
  },"155": {
    "doc": "Guess Number Higher or Lower",
    "title": "Guess Number Higher or Lower",
    "content": "We are playing the Guess Game. The game is as follows: . I pick a number from 1 to n. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined API int guess(int num), which returns three possible results: . | -1: Your guess is higher than the number I picked (i.e. num &gt; pick). | 1: Your guess is lower than the number I picked (i.e. num &lt; pick). | 0: your guess is equal to the number I picked (i.e. num == pick). | Return the number that I picked. | . Example 1: . Input: n = 10, pick = 6 Output: 6 . Example 2: . Input: n = 1, pick = 1 Output: 1 . Example 3: . Input: n = 2, pick = 1 Output: 1 . Constraints: . | 1 &lt;= n &lt;= 231 - 1 | 1 &lt;= pick &lt;= n | . Solution . Binary search . /** * Forward declaration of guess API. * @param num your guess * @return -1 if num is higher than the picked number * 1 if num is lower than the picked number * otherwise return 0 * int guess(int num); */ public class Solution extends GuessGame { public int guessNumber(int n) { int s = 1; int e = n; int r; int mid = -1; while(true){ mid = (s+e)/2; r = guess(mid); if(r == 0) break;; if(r == 1){ s = mid+1; }else{ e = mid-1; } } return mid; } } . Ternary Search . ",
    "url": "http://localhost:4000/problem-68-Guess-Number-Higher-or-Lower/",
    "relUrl": "/problem-68-Guess-Number-Higher-or-Lower/"
  },"156": {
    "doc": "Ransom Note",
    "title": "Ransom Note",
    "content": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise. Each letter in magazine can only be used once in ransomNote. Example 1: . Input: ransomNote = \"a\", magazine = \"b\" Output: false . Example 2: . Input: ransomNote = \"aa\", magazine = \"ab\" Output: false . Example 3: . Input: ransomNote = \"aa\", magazine = \"aab\" Output: true . Constraints: . | 1 &lt;= ransomNote.length, magazine.length &lt;= 105 | ransomNote and magazine consist of lowercase English letters. | . Solution . class Solution { public boolean canConstruct(String ransomNote, String magazine) { if(ransomNote.length()&gt;magazine.length()) return false; Map&lt;Character,Integer&gt; m1 = new HashMap&lt;Character, Integer&gt;(); Map&lt;Character,Integer&gt; m2 = new HashMap&lt;Character, Integer&gt;(); for(int i = 0; i &lt;ransomNote.length(); i++){ if(m1.containsKey(ransomNote.charAt(i))){ m1.put(ransomNote.charAt(i),(int)m1.get(ransomNote.charAt(i))+1); }else{ m1.put(ransomNote.charAt(i),1); } } for(int i = 0; i &lt;magazine.length(); i++){ if(m2.containsKey(magazine.charAt(i))){ m2.put(magazine.charAt(i),(int)m2.get(magazine.charAt(i))+1); }else{ m2.put(magazine.charAt(i),1); } } for(Map.Entry&lt;Character,Integer&gt; e : m1.entrySet()){ if(!m2.containsKey(e.getKey())) return false; else if((int)e.getValue() &gt; (int)m2.get(e.getKey())) return false; } return true; } } . Faster Solution . class Solution { public boolean canConstruct(String ransomNote, String magazine) { int[] count=new int[26]; for(int i=0;i&lt;magazine.length();i++){ char ch=magazine.charAt(i); count[ch-'a']++; } for(int i=0;i&lt;ransomNote.length();i++){ char ch=ransomNote.charAt(i); if(--count[ch-'a']&lt;0){ return false; } } return true; } } . ",
    "url": "http://localhost:4000/problem-69-Ransom-Note/",
    "relUrl": "/problem-69-Ransom-Note/"
  },"157": {
    "doc": "Remove Duplicates from Sorted Array",
    "title": "Remove Duplicates from Sorted Array",
    "content": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. Custom Judge: . The judge will test your solution with the following code: . int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i &lt; k; i++) { assert nums[i] == expectedNums[i]; } . If all assertions pass, then your solution will be accepted. Example 1: . Input: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: . Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Constraints: . | 1 &lt;= nums.length &lt;= 3 * 104 | -100 &lt;= nums[i] &lt;= 100 | nums is sorted in non-decreasing order. | . Solution . class Solution { public int removeDuplicates(int[] nums) { int i = 0; for(int j = 1; j&lt;nums.length; j++){ if(nums[j-1] == nums[j]) continue; nums[++i] = nums[j]; } return i+1; } } . ",
    "url": "http://localhost:4000/problem-7-remove-duplicates-from-sorted-array/",
    "relUrl": "/problem-7-remove-duplicates-from-sorted-array/"
  },"158": {
    "doc": "First Unique Character in a String",
    "title": "First Unique Character in a String",
    "content": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1. Example 1: . Input: s = \"leetcode\" Output: 0 . Example 2: . Input: s = \"loveleetcode\" Output: 2 . Example 3: . Input: s = \"aabb\" Output: -1 . Constraints: . | 1 &lt;= s.length &lt;= 105 | s consists of only lowercase English letters. | . Solution . class Solution { public int firstUniqChar(String s) { Map&lt;Character,Integer&gt; m = new HashMap&lt;Character,Integer&gt;(); for(int i=0; i&lt;s.length(); i++){ if(m.containsKey(s.charAt(i))) m.put(s.charAt(i),(int)m.get(s.charAt(i))+1); else m.put(s.charAt(i),1); } for(int i=0; i&lt;s.length(); i++){ if((int)m.get(s.charAt(i)) == 1) return i; } return -1; } } . Without hashMap . class Solution { public int firstUniqChar(String s) { int[] count = new int[26]; int n = s.length(); // build char count bucket : &lt;charIndex, count&gt; for (int i = 0; i &lt; n; i++) { int index = s.charAt(i) - 'a'; count[index]++; } // find the index for (int i = 0; i &lt; n; i++) { int index = s.charAt(i) - 'a'; if (count[index] == 1) { return i; } } return -1; } } . ",
    "url": "http://localhost:4000/problem-70-First-Unique-Character-in-a-String/",
    "relUrl": "/problem-70-First-Unique-Character-in-a-String/"
  },"159": {
    "doc": "Find the Difference",
    "title": "Find the Difference",
    "content": "You are given two strings s and t. String t is generated by random shuffling string s and then add one more letter at a random position. Return the letter that was added to t. Example 1: . Input: s = \"abcd\", t = \"abcde\" Output: \"e\" Explanation: 'e' is the letter that was added. Example 2: . Input: s = \"\", t = \"y\" Output: \"y\" . Constraints: . | 0 &lt;= s.length &lt;= 1000 | t.length == s.length + 1 | s and t consist of lowercase English letters. | . Solution . class Solution { public char findTheDifference(String s, String t) { int ch[] = new int[26]; for(int i=0; i&lt;t.length(); i++){ ch[t.charAt(i) - 'a']++; } for(int i=0; i&lt;s.length(); i++){ ch[s.charAt(i) - 'a']--; } for(int i = 0; i&lt;26; i++){ if(ch[i] == 1) return (char)('a'+i); } return '1'; } } . Using XOR . class Solution { public char findTheDifference(String s, String t) { char res = 0; for(char ch: s.toCharArray()) { res ^= ch; } for(char ch: t.toCharArray()) { res ^= ch; } return res; } } . ",
    "url": "http://localhost:4000/problem-71-Find-the-Difference/",
    "relUrl": "/problem-71-Find-the-Difference/"
  },"160": {
    "doc": "Is Subsequence",
    "title": "Is Subsequence",
    "content": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., “ace” is a subsequence of “abcde” while “aec” is not). Example 1: . Input: s = \"abc\", t = \"ahbgdc\" Output: true . Example 2: . Input: s = \"axc\", t = \"ahbgdc\" Output: false . Constraints: . | 0 &lt;= s.length &lt;= 100 | 0 &lt;= t.length &lt;= 104 | s and t consist only of lowercase English letters. | . Solution: . class Solution { public boolean isSubsequence(String s, String t) { StringBuilder sb = new StringBuilder(); int j = 0; for(int i = 0; i&lt;s.length(); i++){ while(j&lt;t.length() &amp;&amp; s.charAt(i) != t.charAt(j)) j++; if(j&gt;=t.length()) break; else{ sb.append(t.charAt(j)); j++; } } return s.equals(sb.toString()); } } . ",
    "url": "http://localhost:4000/problem-72-Is-Subsequence/",
    "relUrl": "/problem-72-Is-Subsequence/"
  },"161": {
    "doc": "Sum of Left Leaves",
    "title": "Sum of Left Leaves",
    "content": "Given the root of a binary tree, return the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left child of another node. Example 1: . Input: root = [3,9,20,null,null,15,7] Output: 24 Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively. Example 2: . Input: root = [1] Output: 0 . Constraints: . | The number of nodes in the tree is in the range [1, 1000]. | -1000 &lt;= Node.val &lt;= 1000 | . Solution . /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class NodeMap{ public TreeNode head; public char f; NodeMap(TreeNode t, char c){ head = t; f = c; } } class Solution { public int sumOfLeftLeaves(TreeNode root) { Stack&lt;NodeMap&gt; s = new Stack&lt;NodeMap&gt;(); NodeMap m = new NodeMap(root,'*'); s.push(m); int sum = 0; NodeMap t; while(!s.isEmpty()){ t = s.pop(); if(t.f == 'L' &amp;&amp; t.head.left == null &amp;&amp; t.head.right == null) sum = sum + t.head.val; if(t.head.left != null ) s.push(new NodeMap(t.head.left, 'L')); if(t.head.right != null) s.push(new NodeMap(t.head.right, 'R')); } return sum; } } . ",
    "url": "http://localhost:4000/problem-73-Sum-of-Left-Leaves/",
    "relUrl": "/problem-73-Sum-of-Left-Leaves/"
  },"162": {
    "doc": "Convert a Number to Hexadecimal",
    "title": "Convert a Number to Hexadecimal",
    "content": "Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used. All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself. Note: You are not allowed to use any built-in library method to directly solve this problem. Example 1: . Input: num = 26 Output: \"1a\" . Example 2: . Input: num = -1 Output: \"ffffffff\" . Constraints: . | -231 &lt;= num &lt;= 231 - 1 | . Solution: . class Solution { public String toHex(int num) { return Integer.toHexString(num); } } . ",
    "url": "http://localhost:4000/problem-74-Convert-a-Number-to-Hexadecimal/",
    "relUrl": "/problem-74-Convert-a-Number-to-Hexadecimal/"
  },"163": {
    "doc": "Longest Palindrome",
    "title": "Longest Palindrome",
    "content": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters. Letters are case sensitive, for example, “Aa” is not considered a palindrome here. Example 1: . Input: s = \"abccccdd\" Output: 7 Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7. Example 2: . Input: s = \"a\" Output: 1 . Example 3: . Input: s = \"bb\" Output: 2 . Constraints: . | 1 &lt;= s.length &lt;= 2000 | s consists of lowercase and/or uppercase English letters only. | . Solution . class Solution { public int longestPalindrome(String s) { Map&lt;Character, Integer&gt; m = new HashMap&lt;Character,Integer&gt;(); for(int i = 0; i&lt;s.length(); i++){ m.put(s.charAt(i), m.getOrDefault(s.charAt(i),0)+1); } int a = 0; for(int i : m.values()){ if(i%2 == 0){ a = a + i; }else if(i&gt;1){ a += i - 1; } } if(s.length() &gt; a) return a+1; return a; } } . Faster approach . class Solution { public int longestPalindrome(String s) { int[] count = new int[128]; for (char c: s.toCharArray()) count[c]++; int ans = 0; for (int v: count) { ans += v / 2 * 2; if (ans % 2 == 0 &amp;&amp; v % 2 == 1) ans++; } return ans; } } . ",
    "url": "http://localhost:4000/problem-75-Longest-Palindrome/",
    "relUrl": "/problem-75-Longest-Palindrome/"
  },"164": {
    "doc": "Third Maximum Number",
    "title": "Third Maximum Number",
    "content": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number. Example 1: . Input: nums = [3,2,1] Output: 1 Explanation: The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1. Example 2: . Input: nums = [1,2] Output: 2 Explanation: The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead. Example 3: . Input: nums = [2,2,3,1] Output: 1 Explanation: The first distinct maximum is 3. The second distinct maximum is 2 (both 2's are counted together since they have the same value). The third distinct maximum is 1. Constraints: . | 1 &lt;= nums.length &lt;= 104 | -231 &lt;= nums[i] &lt;= 231 - 1 | . Solution: . class Solution { public int thirdMax(int[] nums) { long max = Long.MIN_VALUE; long secondMax = max; long thirdMax = secondMax; for(int i = 0 ;i&lt;nums.length;i++){ if(nums[i]&gt;max){ thirdMax = secondMax; secondMax = max; max = nums[i]; } else if(nums[i]&lt;max &amp;&amp; nums[i]&gt;secondMax){ thirdMax = secondMax; secondMax = nums[i]; } else if(nums[i]&lt;secondMax &amp;&amp; nums[i]&gt;thirdMax){ thirdMax = nums[i]; } } return thirdMax==Long.MIN_VALUE ? (int) max : (int) thirdMax; } } . ",
    "url": "http://localhost:4000/problem-76-Third-Maximum-Number/",
    "relUrl": "/problem-76-Third-Maximum-Number/"
  },"165": {
    "doc": "Add Strings",
    "title": "Add Strings",
    "content": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string. You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly. Example 1: . Input: num1 = \"11\", num2 = \"123\" Output: \"134\" . Example 2: . Input: num1 = \"456\", num2 = \"77\" Output: \"533\" . Example 3: . Input: num1 = \"0\", num2 = \"0\" Output: \"0\" . Constraints: . | 1 &lt;= num1.length, num2.length &lt;= 104 | num1 and num2 consist of only digits. | num1 and num2 don’t have any leading zeros except for the zero itself. | . Solution: . class Solution { public String addStrings(String num1, String num2) { int c = 0; int v; int i = num1.length() - 1; int j = num2.length() - 1; StringBuilder sb = new StringBuilder(); while(i&gt;=0 &amp;&amp; j&gt;=0){ v = (num1.charAt(i) -48 + num2.charAt(j) -48 + c)%10; c = (num1.charAt(i) -48 + num2.charAt(j) -48 + c)/10; sb.append(v); i--; j--; } while(i&gt;=0){ v = (num1.charAt(i) -48 + c)%10; c = (num1.charAt(i) -48 + c)/10; sb.append(v); i--; } while(j&gt;=0){ v = (num2.charAt(j) -48 + c)%10; c = (num2.charAt(j) -48 + c)/10; sb.append(v); j--; } if(c&gt;=1) sb.append(c); return sb.reverse().toString(); } } . ",
    "url": "http://localhost:4000/problem-77-Add-Strings/",
    "relUrl": "/problem-77-Add-Strings/"
  },"166": {
    "doc": "Number of Segments in a String",
    "title": "Number of Segments in a String",
    "content": "Given a string s, return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space characters. Example 1: . Input: s = \"Hello, my name is John\" Output: 5 Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"] . Example 2: . Input: s = \"Hello\" Output: 1 . Constraints: . | 0 &lt;= s.length &lt;= 300 | s consists of lowercase and uppercase English letters, digits, or one of the following characters “!@#$%^&amp;*()_+-=’,.:”. | The only space character in s is ‘ ‘. | . Solution . class Solution { public int countSegments(String s) { if(s.length() == 0) return 0; String[] ar = s.split(\" \"); int len = ar.length; for(String st : ar){ if(st.length() == 0) len--; } return len; } } . ",
    "url": "http://localhost:4000/problem-78-Number-of-Segments-in-a-String/",
    "relUrl": "/problem-78-Number-of-Segments-in-a-String/"
  },"167": {
    "doc": "Find All Numbers Disappeared in an Array",
    "title": "Find All Numbers Disappeared in an Array",
    "content": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums. Example 1: . Input: nums = [4,3,2,7,8,2,3,1] Output: [5,6] . Example 2: . Input: nums = [1,1] Output: [2] . Constraints: . | n == nums.length | 1 &lt;= n &lt;= 105 | 1 &lt;= nums[i] &lt;= n | . Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space. Solution: . class Solution { public List findDisappearedNumbers(int[] arr) { int i = 0; List&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;(); while(i&lt;arr.length){ if(arr[i] == -1){ i++; continue; } if(arr[arr[i] -1] == -1){ i++; continue; }else if(arr[i] == i+1){ arr[i] = -1; i++; } else{ int t = arr[arr[i]-1]; arr[arr[i] -1] = -1; arr[i] = t; } } for(int k = 0; k&lt;arr.length; k++){ if(arr[k] != -1){ l.add(k+1); } } return l; } } . ",
    "url": "http://localhost:4000/problem-79-Find-All-Numbers-Disappeared-in-an-Array/",
    "relUrl": "/problem-79-Find-All-Numbers-Disappeared-in-an-Array/"
  },"168": {
    "doc": "Remove Element",
    "title": "Remove Element",
    "content": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements. Return k after placing the final result in the first k slots of nums. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. Custom Judge: . The judge will test your solution with the following code: . int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length. // It is sorted with no values equaling val. int k = removeElement(nums, val); // Calls your implementation assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i &lt; actualLength; i++) { assert nums[i] == expectedNums[i]; } . If all assertions pass, then your solution will be accepted. Example 1: . Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,_,_] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2: . Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores). Constraints: . | 0 &lt;= nums.length &lt;= 100 | 0 &lt;= nums[i] &lt;= 50 | 0 &lt;= val &lt;= 100 | . Solution . class Solution { public int removeElement(int[] nums, int val) { int i = 0; for(int j = 0; j&lt;nums.length; j++){ if(nums[j] == val) continue; nums[i++] = nums[j]; } return i; } } . ",
    "url": "http://localhost:4000/problem-8-remove-element/",
    "relUrl": "/problem-8-remove-element/"
  },"169": {
    "doc": "Assign Cookies",
    "title": "Assign Cookies",
    "content": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] &gt;= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number. Example 1: . Input: g = [1,2,3], s = [1,1] Output: 1 Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1. Example 2: . Input: g = [1,2], s = [1,2,3] Output: 2 Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2. Constraints: . | 1 &lt;= g.length &lt;= 3 * 104 | 0 &lt;= s.length &lt;= 3 * 104 | 1 &lt;= g[i], s[j] &lt;= 231 - 1 | . Solution . class Solution { public int findContentChildren(int[] g, int[] s) { int c = 0; Arrays.sort(g); Arrays.sort(s); int k = 0; for(int i = 0; i&lt;s.length; i++){ if(k&lt;g.length &amp;&amp; g[k]&lt;=s[i]){ c++; k++; } } return c; } } . ",
    "url": "http://localhost:4000/problem-80-Assign-Cookies/",
    "relUrl": "/problem-80-Assign-Cookies/"
  },"170": {
    "doc": "Hamming Distance",
    "title": "Hamming Distance",
    "content": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers x and y, return the Hamming distance between them. Example 1: . Input: x = 1, y = 4 Output: 2 Explanation: 1 (0 0 0 1) 4 (0 1 0 0) ↑ ↑ The above arrows point to positions where the corresponding bits are different. Example 2: . Input: x = 3, y = 1 Output: 1 . Constraints: . | 0 &lt;= x, y &lt;= 231 - 1 | . Solution . class Solution { public int hammingDistance(int x, int y) { int r = x ^ y; int c = 0; while(r&gt;0){ c = c + r%2; r = r/2; } return c; } } . ",
    "url": "http://localhost:4000/problem-81-Hamming-Distance/",
    "relUrl": "/problem-81-Hamming-Distance/"
  },"171": {
    "doc": "Island Perimeter",
    "title": "Island Perimeter",
    "content": "You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes”, meaning the water inside isn’t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island. Example 1: . Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]] Output: 16 Explanation: The perimeter is the 16 yellow stripes in the image above. Example 2: . Input: grid = [[1]] Output: 4 . Example 3: . Input: grid = [[1,0]] Output: 4 . Constraints: . | row == grid.length | col == grid[i].length | 1 &lt;= row, col &lt;= 100 | grid[i][j] is 0 or 1. | There is exactly one island in grid. | . Solution . class Solution { public int islandPerimeter(int[][] grid) { int p = 0; for(int i = 0; i&lt;grid.length; i++){ for(int j = 0 ; j&lt;grid[0].length; j++){ if(grid[i][j] == 1){ if(i == 0) p++; if(j == 0) p++; if(i == grid.length - 1) p++; if(j == grid[0].length -1) p++; if(i&gt;0 &amp;&amp; grid[i-1][j] == 0) p++; if(i+1&lt;grid.length &amp;&amp; grid[i+1][j] == 0) p++; if(j&gt;0 &amp;&amp; grid[i][j-1] == 0) p++; if(j+1&lt;grid[0].length &amp;&amp; grid[i][j+1] == 0) p++; } } } return p; } } . ",
    "url": "http://localhost:4000/problem-82-Island%20Perimeter/",
    "relUrl": "/problem-82-Island Perimeter/"
  },"172": {
    "doc": "Number Complement",
    "title": "Number Complement",
    "content": "The complement of an integer is the integer you get when you flip all the 0’s to 1’s and all the 1’s to 0’s in its binary representation. | For example, The integer 5 is “101” in binary and its complement is “010” which is the integer 2. Given an integer num, return its complement. | . Example 1: . Input: num = 5 Output: 2 Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2. Example 2: . Input: num = 1 Output: 0 Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0. Constraints: . | 1 &lt;= num &lt; 231 | . Solution . class Solution { public int findComplement(int num) { int numberOfBits = (int)(Math.floor(Math.log(num) / Math.log(2))) + 1; return ((1 &lt;&lt; numberOfBits) - 1) ^ num; } } . Faster solution . class Solution { public int findComplement(int num) { int mask = 0; while(mask &lt; num) mask = mask &lt;&lt; 1 | 1; int ans = (~ num) &amp; mask ; return ans; } } . ",
    "url": "http://localhost:4000/problem-83-Number-Complement/",
    "relUrl": "/problem-83-Number-Complement/"
  },"173": {
    "doc": "Max Consecutive Ones",
    "title": "Max Consecutive Ones",
    "content": "Given a binary array nums, return the maximum number of consecutive 1’s in the array. Example 1: . Input: nums = [1,1,0,1,1,1] Output: 3 Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3. Example 2: . Input: nums = [1,0,1,1,0,1] Output: 2 . Constraints: . | 1 &lt;= nums.length &lt;= 105 | nums[i] is either 0 or 1. | . Solution . class Solution { public int findMaxConsecutiveOnes(int[] nums) { int m = 0; int p = 0; int i = 0; while(i&lt;nums.length){ if(nums[i] == 0) { i++; continue; } while(i&lt;nums.length &amp;&amp; nums[i] == 1){ m++; i++; } if(m&gt;p){ p = m; } m = 0; } return p; } } . ",
    "url": "http://localhost:4000/problem-84-Max-Consecutive-Ones/",
    "relUrl": "/problem-84-Max-Consecutive-Ones/"
  },"174": {
    "doc": "License Key Formatting",
    "title": "License Key Formatting",
    "content": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k. We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return the reformatted license key. Example 1: . Input: s = \"5F3Z-2e-9-w\", k = 4 Output: \"5F3Z-2E9W\" Explanation: The string s has been split into two parts, each part has 4 characters. Note that the two extra dashes are not needed and can be removed. Example 2: . Input: s = \"2-5g-3-J\", k = 2 Output: \"2-5G-3J\" Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above. Constraints: . | 1 &lt;= s.length &lt;= 105 | s consists of English letters, digits, and dashes ‘-‘. | 1 &lt;= k &lt;= 104 | . Solution . class Solution { public String licenseKeyFormatting(String s, int k) { StringBuilder sb = new StringBuilder(); int count = 0; for(int i = s.length()-1;i&gt;=0;i--){ if(s.charAt(i) != '-'){ if(count == k){ count = 0; sb = sb.append(\"-\"); } sb = sb.append(Character.toUpperCase(s.charAt(i))); count++; } } return sb.reverse().toString(); } } . ",
    "url": "http://localhost:4000/problem-85-License-Key-Formatting/",
    "relUrl": "/problem-85-License-Key-Formatting/"
  },"175": {
    "doc": "Implement strStr()",
    "title": "Implement strStr()",
    "content": "Implement strStr(). Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. Clarification: . What should we return when needle is an empty string? This is a great question to ask during an interview. For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf(). Example 1: . Input: haystack = \"hello\", needle = \"ll\" Output: 2 . Example 2: . Input: haystack = \"aaaaa\", needle = \"bba\" Output: -1 . Constraints: . | 1 &lt;= haystack.length, needle.length &lt;= 104 | haystack and needle consist of only lowercase English characters. | . Solution . class Solution { public int strStr(String haystack, String needle) { if(needle.equals(\"\") || needle == null) return 0; int j = 0; int res = -1; for(int i=0; i&lt;haystack.length(); i++){ if(haystack.charAt(i) == needle.charAt(j)){ if(j == 0){ res = i; } j++; if(j == needle.length()) return res; }else{ if(res != -1){ i = res; } res = -1; j = 0; } } if(j != needle.length()) return -1; return res; } } . ",
    "url": "http://localhost:4000/problem-9-implement-strStr/",
    "relUrl": "/problem-9-implement-strStr/"
  },"176": {
    "doc": "Responsive Modifiers",
    "title": "Responsive modifiers",
    "content": "Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. | Modifier | Screen size | . | (none) | All screens until the next modifier | . | xs | 320px (20rem) and up | . | sm | 500px (31.25rem) and up | . | md | 740px (46.25rem) and up | . | lg | 1120px (70rem) and up | . | xl | 1400px (87.5rem) and up | . ",
    "url": "http://localhost:4000/docs/utilities/responsive-modifiers/#responsive-modifiers",
    "relUrl": "/docs/utilities/responsive-modifiers/#responsive-modifiers"
  },"177": {
    "doc": "Responsive Modifiers",
    "title": "Responsive Modifiers",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/responsive-modifiers/",
    "relUrl": "/docs/utilities/responsive-modifiers/"
  },"178": {
    "doc": "Search",
    "title": "Search",
    "content": " ",
    "url": "http://localhost:4000/docs/search/",
    "relUrl": "/docs/search/"
  },"179": {
    "doc": "Search",
    "title": "Table of contents",
    "content": ". | TOC | . Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: . | Page title | Page content | Page URL | . ",
    "url": "http://localhost:4000/docs/search/#table-of-contents",
    "relUrl": "/docs/search/#table-of-contents"
  },"180": {
    "doc": "Search",
    "title": "Enable search in configuration",
    "content": "In your site’s _config.yml, enable search: . # Enable or disable the site search # Supports true (default) or false search_enabled: true . Search granularity . Pages are split into sections that can be searched individually. The sections are defined by the headings on the page. Each section is displayed in a separate search result. # Split pages into sections that can be searched individually # Supports 1 - 6, default: 2 search.heading_level: 2 . Search previews . A search result can contain previews that show where the search words are found in the specific section. # Maximum amount of previews per search result # Default: 3 search.previews: 3 # Maximum amount of words to display before a matched word in the preview # Default: 5 search.preview_words_before: 5 # Maximum amount of words to display after a matched word in the preview # Default: 10 search.preview_words_after: 10 . Search tokenizer . The default is for hyphens to separate tokens in search terms: gem-based is equivalent to gem based, matching either word. To allow search for hyphenated words: . # Set the search token separator # Default: /[\\s\\-/]+/ # Example: enable support for hyphenated search words search.tokenizer_separator: /[\\s/]+/ . Display URL in search results . # Display the relative url in search results # Supports true (default) or false search.rel_url: false . Display search button . The search button displays in the bottom right corner of the screen and triggers the search input when clicked. # Enable or disable the search button that appears in the bottom right corner of every page # Supports true or false (default) search.button: true . ",
    "url": "http://localhost:4000/docs/search/#enable-search-in-configuration",
    "relUrl": "/docs/search/#enable-search-in-configuration"
  },"181": {
    "doc": "Search",
    "title": "Hiding pages from search",
    "content": "Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: . Example . --- layout: default title: Page not found nav_exclude: true search_exclude: true --- . ",
    "url": "http://localhost:4000/docs/search/#hiding-pages-from-search",
    "relUrl": "/docs/search/#hiding-pages-from-search"
  },"182": {
    "doc": "Search",
    "title": "Generate search index when used as a gem",
    "content": "If you use Just the Docs as a remote theme, you do not need the following steps. If you use the theme as a gem, you must initialize the search by running this rake command that comes with just-the-docs: . $ bundle exec just-the-docs rake search:init . This command creates the assets/js/zzzz-search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually with this content. ",
    "url": "http://localhost:4000/docs/search/#generate-search-index-when-used-as-a-gem",
    "relUrl": "/docs/search/#generate-search-index-when-used-as-a-gem"
  },"183": {
    "doc": "Tables",
    "title": "Tables",
    "content": "Tables are responsive by default, allowing wide tables to have a horizontal scroll to access columns outside of the normal viewport. | head1 | head two | three | . | ok | good swedish fish | nice | . | out of stock | good and plenty | nice | . | ok | good oreos | hmm | . | ok | good zoute drop | yumm | . | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | . ",
    "url": "http://localhost:4000/docs/ui-components/tables/",
    "relUrl": "/docs/ui-components/tables/"
  },"184": {
    "doc": "Typography",
    "title": "Typography",
    "content": " ",
    "url": "http://localhost:4000/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },"185": {
    "doc": "Typography",
    "title": "Table of contents",
    "content": ". | Font stack | Responsive type scale | Headings | Body text | Inline elements | Typographic Utilities | . ",
    "url": "http://localhost:4000/docs/ui-components/typography/#table-of-contents",
    "relUrl": "/docs/ui-components/typography/#table-of-contents"
  },"186": {
    "doc": "Typography",
    "title": "Font stack",
    "content": "By default, Just the Docs uses a native system font stack for sans-serif fonts: . system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . For monospace type, like code snippets or the &lt;pre&gt; element, Just the Docs uses a native system font stack for monospace fonts: . \"SFMono-Regular\", Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . ",
    "url": "http://localhost:4000/docs/ui-components/typography/#font-stack",
    "relUrl": "/docs/ui-components/typography/#font-stack"
  },"187": {
    "doc": "Typography",
    "title": "Responsive type scale",
    "content": "Just the Docs uses a responsive type scale that shifts depending on the viewport size. | Selector | Small screen size font-size | Large screen size font-size | . | h1, .text-alpha | 32px | 36px | . | h2, .text-beta | 18px | 24px | . | h3, .text-gamma | 16px | 18px | . | h4, .text-delta | 14px | 16px | . | h5, .text-epsilon | 16px | 18px | . | h6, .text-zeta | 18px | 24px | . | body | 14px | 16px | . ",
    "url": "http://localhost:4000/docs/ui-components/typography/#responsive-type-scale",
    "relUrl": "/docs/ui-components/typography/#responsive-type-scale"
  },"188": {
    "doc": "Typography",
    "title": "Headings",
    "content": "Headings are rendered like this: . ",
    "url": "http://localhost:4000/docs/ui-components/typography/#headings",
    "relUrl": "/docs/ui-components/typography/#headings"
  },"189": {
    "doc": "Typography",
    "title": "Heading 1",
    "content": " ",
    "url": "http://localhost:4000/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },"190": {
    "doc": "Typography",
    "title": "Heading 2",
    "content": "Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . ",
    "url": "http://localhost:4000/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },"191": {
    "doc": "Typography",
    "title": "Body text",
    "content": "Default body text is rendered like this: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ",
    "url": "http://localhost:4000/docs/ui-components/typography/#body-text",
    "relUrl": "/docs/ui-components/typography/#body-text"
  },"192": {
    "doc": "Typography",
    "title": "Inline elements",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). ",
    "url": "http://localhost:4000/docs/ui-components/typography/#inline-elements",
    "relUrl": "/docs/ui-components/typography/#inline-elements"
  },"193": {
    "doc": "Typography",
    "title": "Typographic Utilities",
    "content": "There are a number of specific typographic CSS classes that allow you to override default styling for font size, font weight, line height, and capitalization. View typography utilities . ",
    "url": "http://localhost:4000/docs/ui-components/typography/#typographic-utilities",
    "relUrl": "/docs/ui-components/typography/#typographic-utilities"
  },"194": {
    "doc": "Typography",
    "title": "Typography Utilities",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/typography/#typography-utilities",
    "relUrl": "/docs/utilities/typography/#typography-utilities"
  },"195": {
    "doc": "Typography",
    "title": "Table of contents",
    "content": ". | Font size | Font weight | Line height | Text justification | . ",
    "url": "http://localhost:4000/docs/utilities/typography/#table-of-contents",
    "relUrl": "/docs/utilities/typography/#table-of-contents"
  },"196": {
    "doc": "Typography",
    "title": "Font size",
    "content": "Use the .fs-1 - .fs-10 to set an explicit font-size. | Class | Small screen size font-size | Large screen size font-size | . | .fs-1 | 9px | 10px | . | .fs-2 | 11px | 12px | . | .fs-3 | 12px | 14px | . | .fs-4 | 14px | 16px | . | .fs-5 | 16px | 18px | . | .fs-6 | 18px | 24px | . | .fs-7 | 24px | 32px | . | .fs-8 | 32px | 38px | . | .fs-9 | 38px | 42px | . | .fs-10 | 42px | 48px | . Font size 1 . Font size 2 . Font size 3 . Font size 4 . Font size 5 . Font size 6 . Font size 7 . Font size 8 . Font size 9 . Font size 10 . In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } . ",
    "url": "http://localhost:4000/docs/utilities/typography/#font-size",
    "relUrl": "/docs/utilities/typography/#font-size"
  },"197": {
    "doc": "Typography",
    "title": "Font weight",
    "content": "Use the .fw-300 - .fw-700 to set an explicit font-size. Font weight 300 . Font weight 400 . Font weight 500 . Font weight 700 . In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } . ",
    "url": "http://localhost:4000/docs/utilities/typography/#font-weight",
    "relUrl": "/docs/utilities/typography/#font-weight"
  },"198": {
    "doc": "Typography",
    "title": "Line height",
    "content": "Use the lh- classes to explicitly apply line height to text. | Class | line-height value | Notes | . | .lh-0 | 0 |   | . | .lh-tight | 1.1 | Default for headings | . | .lh-default | 1.4 | Default for body (paragraphs) | . No Line height No Line height . Tight line height Tight line height . Default line height Default line height . In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } . ",
    "url": "http://localhost:4000/docs/utilities/typography/#line-height",
    "relUrl": "/docs/utilities/typography/#line-height"
  },"199": {
    "doc": "Typography",
    "title": "Text justification",
    "content": "By default text is justified left. Use these text- classes to override settings: . | Class | What it does | . | .text-left | text-align: left | . | .text-right | text-align: right | . | .text-center | text-align: center | . ",
    "url": "http://localhost:4000/docs/utilities/typography/#text-justification",
    "relUrl": "/docs/utilities/typography/#text-justification"
  },"200": {
    "doc": "Typography",
    "title": "Typography",
    "content": " ",
    "url": "http://localhost:4000/docs/utilities/typography/",
    "relUrl": "/docs/utilities/typography/"
  },"201": {
    "doc": "UI Components",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "http://localhost:4000/docs/ui-components",
    "relUrl": "/docs/ui-components"
  },"202": {
    "doc": "Utilities",
    "title": "Utilities",
    "content": "CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size. ",
    "url": "http://localhost:4000/docs/utilities",
    "relUrl": "/docs/utilities"
  }
}
