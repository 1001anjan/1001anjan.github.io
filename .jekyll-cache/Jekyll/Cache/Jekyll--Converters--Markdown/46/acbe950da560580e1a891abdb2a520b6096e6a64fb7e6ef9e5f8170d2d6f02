I"Ñ<h1 id="sum-of-left-leaves">Sum of Left Leaves</h1>

<p>Given the root of a binary tree, return the sum of all left leaves.</p>

<p>A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.</p>

<h5 id="example-1">Example 1:</h5>
<p><img src="../../assets/images/ds/leftsum-tree.jpeg" alt="" /></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [3,9,20,null,null,15,7]
Output: 24
Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.
</code></pre></div></div>
<h5 id="example-2">Example 2:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1]
Output: 0
</code></pre></div></div>
<h5 id="constraints">Constraints:</h5>
<ul>
  <li>The number of nodes in the tree is in the range [1, 1000].</li>
  <li>-1000 &lt;= Node.val &lt;= 1000</li>
</ul>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">NodeMap</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="n">head</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">char</span> <span class="n">f</span><span class="o">;</span>
    <span class="nc">NodeMap</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">t</span><span class="o">,</span> <span class="kt">char</span> <span class="n">c</span><span class="o">){</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumOfLeftLeaves</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">NodeMap</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">NodeMap</span><span class="o">&gt;();</span>
        <span class="nc">NodeMap</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NodeMap</span><span class="o">(</span><span class="n">root</span><span class="o">,</span><span class="sc">'*'</span><span class="o">);</span>
        <span class="n">s</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">sum</span>  <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">NodeMap</span> <span class="n">t</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">s</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">f</span> <span class="o">==</span> <span class="sc">'L'</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="n">s</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="nc">NodeMap</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="sc">'L'</span><span class="o">));</span>
            <span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">s</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">new</span> <span class="nc">NodeMap</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">head</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="sc">'R'</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

:ET