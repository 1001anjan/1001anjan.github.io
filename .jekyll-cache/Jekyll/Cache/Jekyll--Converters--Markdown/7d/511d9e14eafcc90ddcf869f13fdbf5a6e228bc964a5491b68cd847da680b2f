I"·<h1 id="delete-node-in-a-linked-list">Delete Node in a Linked List</h1>

<p>Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.</p>

<p>It is guaranteed that the node to be deleted is not a tail node in the list.</p>

<h5 id="example-1">Example 1:</h5>
<p><img src="../../assets/images/ds/node1.jpeg" alt="" /></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.
</code></pre></div></div>
<h5 id="constraints">Constraints:</h5>
<ul>
  <li>The number of the nodes in the given list is in the range [2, 1000].</li>
  <li>-1000 &lt;= Node.val &lt;= 1000</li>
  <li>The value of each node in the list is unique.</li>
  <li>The node to be deleted is in the list and is not a tail node</li>
</ul>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteNode</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">//We are not going to delete the given node</span>
        <span class="c1">//We will delete the node next to it</span>
        <span class="c1">//Because for deleting the given node we need its previous node</span>
        <span class="c1">//And will copy its value to the given node</span>
        
        <span class="c1">//Storing the vaue of the next node to the given node</span>
        <span class="kt">int</span> <span class="n">nextNodeVal</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
        <span class="c1">//Then removing that next node</span>
        <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="c1">//And simply copy the value</span>
        <span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">nextNodeVal</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET