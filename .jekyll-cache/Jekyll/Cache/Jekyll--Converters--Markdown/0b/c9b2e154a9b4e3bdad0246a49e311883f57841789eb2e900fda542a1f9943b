I"«3<h1 id="path-sum">Path Sum</h1>
<p>Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.</p>

<p>A leaf is a node with no children.</p>

<h5 id="example-1">Example 1:</h5>
<p><img src="../../assets/images/ds/pathsum1.jpeg" alt="" /></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
</code></pre></div></div>
<h5 id="example-2">Example 2:</h5>
<p><img src="../../assets/images/ds/pathsum2.jpeg" alt="" /></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --&gt; 2): The sum is 3.
(1 --&gt; 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
</code></pre></div></div>
<h5 id="example-3">Example 3:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
</code></pre></div></div>

<h3 id="constraints">Constraints:</h3>
<ul>
  <li>The number of nodes in the tree is in the range [0, 5000].</li>
  <li>-1000 &lt;= Node.val &lt;= 1000</li>
  <li>-1000 &lt;= targetSum &lt;= 1000</li>
</ul>

<h3 id="solution">Solution</h3>
<h4 id="non-recursive">Non-Recursive</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPathSum</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">targetSum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;();</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">,</span> <span class="nc">Relation</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">,</span> <span class="nc">Relation</span><span class="o">&gt;();</span>
        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Relation</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">));</span>
        <span class="nc">TreeNode</span> <span class="n">ptr</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">Relation</span> <span class="n">rl</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">ptr</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">rl</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ptr</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">rl</span><span class="o">.</span><span class="na">parent</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
              <span class="n">sum</span> <span class="o">=</span>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">rl</span><span class="o">.</span><span class="na">parent</span><span class="o">).</span><span class="na">sumVal</span> <span class="o">+</span> <span class="n">ptr</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="n">sum</span> <span class="o">=</span> <span class="n">ptr</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">ptr</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">==</span> <span class="n">targetSum</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
                 <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">right</span><span class="o">,</span><span class="k">new</span> <span class="nc">Relation</span><span class="o">(</span><span class="n">ptr</span><span class="o">,</span> <span class="n">sum</span><span class="o">+</span><span class="n">ptr</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">val</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">left</span><span class="o">,</span><span class="k">new</span> <span class="nc">Relation</span><span class="o">(</span><span class="n">ptr</span><span class="o">,</span> <span class="n">sum</span><span class="o">+</span><span class="n">ptr</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Relation</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="n">parent</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">sumVal</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Relation</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">){</span>
        <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
        <span class="n">sumVal</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="recursive">Recursive</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPathSum</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">targetSum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
        
        <span class="k">return</span> <span class="nf">solve</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">targetSum</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">targetSum</span><span class="o">)</span> <span class="o">{</span> 
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
            <span class="k">return</span> <span class="o">(</span><span class="n">targetSum</span><span class="o">-</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span> 
        <span class="o">}</span>
        
        <span class="kt">boolean</span> <span class="n">a</span> <span class="o">=</span> <span class="n">solve</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">targetSum</span><span class="o">-</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        <span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="n">solve</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">targetSum</span><span class="o">-</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        
        <span class="k">return</span> <span class="n">a</span> <span class="o">||</span> <span class="n">b</span><span class="o">;</span> 
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

:ET