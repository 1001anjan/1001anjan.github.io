I"Í<h1 id="reverse-bits">Reverse Bits</h1>

<p>Reverse bits of a given 32 bits unsigned integer.</p>

<h5 id="note">Note:</h5>
<ul>
  <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integerâ€™s internal binary representation is the same, whether it is signed or unsigned.</li>
  <li>In Java, the compiler represents the signed integers using 2â€™s complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.</li>
</ul>

<h5 id="example-1">Example 1:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
</code></pre></div></div>
<h5 id="example-2">Example 2:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
</code></pre></div></div>
<h5 id="constraints">Constraints:</h5>
<ul>
  <li>The input must be a binary string of length 32</li>
</ul>

<h3 id="solution">Solution</h3>
:ET