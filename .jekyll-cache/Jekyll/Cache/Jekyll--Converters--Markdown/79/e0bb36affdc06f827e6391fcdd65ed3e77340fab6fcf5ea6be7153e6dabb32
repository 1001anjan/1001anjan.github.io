I"ö<h1 id="number-of-1-bits">Number of 1 Bits</h1>

<p>Write a function that takes an unsigned integer and returns the number of â€˜1â€™ bits it has (also known as the Hamming weight).</p>

<h5 id="note">Note:</h5>

<ul>
  <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integerâ€™s internal binary representation is the same, whether it is signed or unsigned.</li>
  <li>In Java, the compiler represents the signed integers using 2â€™s complement notation. Therefore, in Example 3, the input represents the signed integer. -3.</li>
</ul>

<h5 id="example-1">Example 1:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
</code></pre></div></div>
<h5 id="example-2">Example 2:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
</code></pre></div></div>

<h5 id="example-3">Example 3:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
</code></pre></div></div>

<h5 id="constraints">Constraints:</h5>
<ul>
  <li>The input must be a binary string of length 32.</li>
</ul>

<h3 id="solution">Solution</h3>
:ET