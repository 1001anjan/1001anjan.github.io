I"A<h1 id="implement-strstr">Implement strStr()</h1>

<p>Implement strStr().</p>

<p>Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>

<h3 id="clarification">Clarification:</h3>

<p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p>

<p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p>

<h4 id="example-1">Example 1:</h4>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "hello", needle = "ll"
Output: 2
</code></pre></div></div>
<h4 id="example-2">Example 2:</h4>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "aaaaa", needle = "bba"
Output: -1
</code></pre></div></div>

<h3 id="constraints">Constraints:</h3>

<ul>
  <li>1 &lt;= haystack.length, needle.length &lt;= 104</li>
  <li>haystack and needle consist of only lowercase English characters.</li>
</ul>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">strStr</span><span class="o">(</span><span class="nc">String</span> <span class="n">haystack</span><span class="o">,</span> <span class="nc">String</span> <span class="n">needle</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">needle</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">""</span><span class="o">)</span> <span class="o">||</span> <span class="n">needle</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">haystack</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">needle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                   <span class="n">res</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> 
                <span class="o">}</span> 
                <span class="n">j</span><span class="o">++;</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">res</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">res</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">res</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">j</span> <span class="o">!=</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET