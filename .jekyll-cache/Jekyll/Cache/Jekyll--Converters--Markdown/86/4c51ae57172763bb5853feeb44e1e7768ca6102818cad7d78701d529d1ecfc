I"<h1 id="intersection-of-two-arrays">Intersection of Two Arrays</h1>

<p>Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.</p>

<h5 id="example-1">Example 1:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
</code></pre></div></div>
<h5 id="example-2">Example 2:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
</code></pre></div></div>
<h5 id="constraints">Constraints:</h5>
<ul>
  <li>1 &lt;= nums1.length, nums2.length &lt;= 1000</li>
  <li>0 &lt;= nums1[i], nums2[i] &lt;= 1000</li>
</ul>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">set_intersection</span><span class="o">(</span><span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set1</span><span class="o">,</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set2</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="o">[]</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">set1</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">s</span> <span class="o">:</span> <span class="n">set1</span><span class="o">)</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">set2</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">))</span> <span class="n">output</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>

    <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="n">idx</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">intersection</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">n</span> <span class="o">:</span> <span class="n">nums1</span><span class="o">)</span> <span class="n">set1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">n</span> <span class="o">:</span> <span class="n">nums2</span><span class="o">)</span> <span class="n">set2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">set1</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">set2</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="k">return</span> <span class="n">set_intersection</span><span class="o">(</span><span class="n">set1</span><span class="o">,</span> <span class="n">set2</span><span class="o">);</span>
    <span class="k">else</span> <span class="k">return</span> <span class="nf">set_intersection</span><span class="o">(</span><span class="n">set2</span><span class="o">,</span> <span class="n">set1</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET