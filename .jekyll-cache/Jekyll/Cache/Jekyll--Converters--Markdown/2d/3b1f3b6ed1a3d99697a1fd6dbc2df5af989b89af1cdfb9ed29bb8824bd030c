I"Ž<h1 id="remove-duplicates-from-sorted-list">Remove Duplicates from Sorted List</h1>
<p>Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</p>
<h4 id="example-1">Example 1</h4>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,1,2]
Output: [1,2]
</code></pre></div></div>
<h4 id="example-2">Example 2</h4>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: head = [1,1,2,3,3]
Output: [1,2,3]
</code></pre></div></div>

<h3 id="constraints">Constraints:</h3>

<ul>
  <li>The number of nodes in the list is in the range [0, 300].</li>
  <li>-100 &lt;= Node.val &lt;= 100</li>
  <li>The list is guaranteed to be sorted in ascending order.</li>
</ul>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">ListNode</span> <span class="nf">deleteDuplicates</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">res</span><span class="o">,</span> <span class="n">ptr</span><span class="o">,</span> <span class="n">rem</span><span class="o">;</span>
        
        <span class="c1">// create first node</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">currVal</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">res</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
           <span class="k">if</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">currVal</span><span class="o">){</span>
               <span class="n">rem</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
               <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
               <span class="n">rem</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
           <span class="o">}</span><span class="k">else</span><span class="o">{</span>
               <span class="n">ptr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
               <span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
               <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
               <span class="n">ptr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
               <span class="n">currVal</span> <span class="o">=</span> <span class="n">ptr</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
           <span class="o">}</span> 
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET