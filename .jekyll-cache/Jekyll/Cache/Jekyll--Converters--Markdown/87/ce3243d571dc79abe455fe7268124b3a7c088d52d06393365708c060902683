I"Y<h1 id="implement-stack-using-queues">Implement Stack using Queues</h1>
<p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).</p>

<p>Implement the MyStack class:</p>

<ul>
  <li>void push(int x) Pushes element x to the top of the stack.</li>
  <li>int pop() Removes the element on the top of the stack and returns it.</li>
  <li>int top() Returns the element on the top of the stack.</li>
  <li>boolean empty() Returns true if the stack is empty, false otherwise.</li>
</ul>

<h5 id="notes">Notes:</h5>

<p>You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queueâ€™s standard operations.</p>

<h5 id="example-1">Example 1:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]
</code></pre></div></div>

<h5 id="explanation">Explanation</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False
</code></pre></div></div>

<h5 id="constraints">Constraints:</h5>
<ul>
  <li>1 &lt;= x &lt;= 9</li>
  <li>At most 100 calls will be made to push, pop, top, and empty.</li>
  <li>All the calls to pop and top are valid.</li>
</ul>

<p>Follow-up: Can you implement the stack using only one queue?</p>

<h3 id="solution">Solution</h3>
:ET