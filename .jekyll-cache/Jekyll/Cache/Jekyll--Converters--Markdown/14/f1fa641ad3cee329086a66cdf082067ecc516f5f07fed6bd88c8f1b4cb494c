I"z<h1 id="convert-sorted-array-to-binary-search-tree">Convert Sorted Array to Binary Search Tree</h1>

<p>Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</p>

<p>A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p>

<h5 id="example-1">Example 1:</h5>

<p><img src="../../assets/images/ds/btree1.jpeg" alt="" /></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:
</code></pre></div></div>
<p><img src="../../assets/images/ds/btree2.jpeg" alt="" /></p>

<h5 id="example-2">Example 2:</h5>
<p><img src="../../assets/images/ds/btree.jpeg" alt="" /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.

</code></pre></div></div>
<h3 id="constraints">Constraints:</h3>
<ul>
  <li>1 &lt;= nums.length &lt;= 104</li>
  <li>-104 &lt;= nums[i] &lt;= 104</li>
  <li>nums is sorted in a strictly increasing order.</li>
</ul>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */</span>
<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">sortedArrayToBST</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">convertBalancedTree</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">TreeNode</span> <span class="nf">convertBalancedTree</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">e</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">&gt;</span><span class="n">e</span><span class="o">)</span> <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
        <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]);</span>
        
        <span class="n">head</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">convertBalancedTree</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">s</span><span class="o">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">head</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">convertBalancedTree</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">nums</span><span class="o">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET