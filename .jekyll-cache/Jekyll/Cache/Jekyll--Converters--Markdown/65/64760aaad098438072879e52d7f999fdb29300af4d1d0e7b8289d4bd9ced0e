I"¿<h1 id="missing-number">Missing Number</h1>

<p>Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.</p>

<h5 id="example-1">Example 1:</h5>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
</code></pre></div></div>
<h5 id="example-2">Example 2:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
</code></pre></div></div>
<h5 id="example-3">Example 3:</h5>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
</code></pre></div></div>
<h5 id="constraints">Constraints:</h5>
<ul>
  <li>n == nums.length</li>
  <li>1 &lt;= n &lt;= 104</li>
  <li>0 &lt;= nums[i] &lt;= n</li>
  <li>All the numbers of nums are unique.</li>
</ul>

<p>Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?</p>

<h3 id="solution">Solution</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">missingNumber</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">len</span><span class="o">*(</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
    
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">items:</span><span class="n">nums</span><span class="o">){</span>
            <span class="n">sum</span><span class="o">-=</span><span class="n">items</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET